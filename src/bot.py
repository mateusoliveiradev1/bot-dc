#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot Discord Profissional para Cl√£ PUBG - Hawk Esports
Desenvolvido para automa√ß√£o completa de servidor e integra√ß√£o PUBG API

Autor: Desenvolvedor S√™nior
Vers√£o: 1.0.0
"""

import discord
from discord.ext import commands, tasks
from discord import app_commands
import asyncio
import logging
import os
from dotenv import load_dotenv
from datetime import datetime
from typing import Literal

# Importar m√≥dulos personalizados da nova estrutura
import sys
from pathlib import Path

from core.storage import DataStorage
from core.postgres_storage import PostgreSQLStorage as PostgresStorage
from core.rank import RankSystem
from features.pubg.api import PUBGIntegration
from features.pubg.dual_ranking import DualRankingSystem
from features.pubg.roles import PubgRankRoles
from features.music.player import MusicSystem
from features.music.dynamic_channels import DynamicChannelsSystem
from features.music.channels import MusicChannelsSystem
from features.tournaments.manager import TournamentSystem
from features.tournaments.seasons import SeasonSystem
from features.achievements.system import AchievementSystem
from features.badges.system import BadgeSystem
from features.notifications.system import NotificationsSystem
from features.moderation.system import ModerationSystem
from features.minigames.system import MinigamesSystem
from features.checkin.system import CheckInSystem
from features.checkin.notifications import CheckInNotifications
from features.checkin.reminders import CheckInReminders
from features.checkin.reports import CheckInReports
from integrations.medal import MedalIntegration
from utils import scheduler, embed_templates, keep_alive
from utils.keep_alive import KeepAlive
from utils.charts_system import ChartsSystem
from utils.scheduler import TaskScheduler
from web.app import WebDashboard
from core.registration import Registration

# Importar ServerSetup dos scripts
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'scripts', 'setup'))
from server_setup import ServerSetup

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('hawk_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('HawkBot')

class HawkBot(commands.Bot):
    """Bot principal do cl√£ Hawk Esports"""
    
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True
        intents.guilds = True
        
        super().__init__(
            command_prefix='!',
            intents=intents,
            description='Bot oficial do cl√£ Hawk Esports - PUBG'
        )
        
        # Inicializar sistema de armazenamento (PostgreSQL ou JSON)
        self.storage = self._initialize_storage()
        self.embed_templates = embed_templates
        self.server_setup = ServerSetup(self)
        self.registration = Registration(self)
        self.pubg_api = PUBGIntegration()
        self.rank_system = RankSystem(self, self.storage, self.pubg_api)
        self.dual_ranking_system = DualRankingSystem(self, self.storage, self.pubg_api, self.rank_system)
        self.medal_integration = MedalIntegration(self, self.storage)
        self.tournament_system = TournamentSystem(self, self.storage)
        self.web_dashboard = WebDashboard(self)
        self.achievement_system = AchievementSystem(self, self.storage)
        self.music_system = MusicSystem(self)
        self.moderation_system = ModerationSystem(self, self.storage)
        self.minigames_system = MinigamesSystem(self, self.storage)
        self.charts_system = ChartsSystem(self, self.storage)
        self.notifications_system = NotificationsSystem(self, self.storage)
        self.pubg_rank_roles = PubgRankRoles(self, self.storage, self.pubg_api)
        self.badge_system = BadgeSystem(self, self.storage, self.pubg_api, self.dual_ranking_system)
        self.season_system = SeasonSystem(self, self.storage, self.dual_ranking_system, self.badge_system)
        self.dynamic_channels = DynamicChannelsSystem(self, self.storage)
        self.music_channels = MusicChannelsSystem(self, self.storage, self.music_system)
        self.checkin_system = CheckInSystem(self, self.storage)
        self.checkin_notifications = CheckInNotifications(self, self.checkin_system)
        self.checkin_reminders = CheckInReminders(self, self.checkin_system, self.storage)
        self.checkin_reports = CheckInReports(self, self.checkin_system, self.storage)
        self.scheduler = TaskScheduler(self, self.storage, self.rank_system, self.medal_integration)
        
        logger.info("Bot Hawk Esports inicializado com sucesso!")
    
    def _initialize_storage(self):
        """Inicializa o sistema de armazenamento baseado nas vari√°veis de ambiente"""
        # Verifica se h√° configura√ß√£o de PostgreSQL
        db_host = os.getenv('DB_HOST')
        db_name = os.getenv('DB_NAME')
        db_user = os.getenv('DB_USER')
        db_password = os.getenv('DB_PASSWORD')
        
        if db_host and db_name and db_user and db_password:
            logger.info("üêò Usando PostgreSQL como sistema de armazenamento")
            return PostgreSQLStorage()
        else:
            logger.info("üìÅ Usando JSON como sistema de armazenamento (desenvolvimento)")
            return DataStorage()
    
    async def setup_hook(self):
        """Configura√ß√µes iniciais do bot"""
        try:
            # Inicializar sistema de armazenamento
            if hasattr(self.storage, 'initialize'):
                await self.storage.initialize()
            
            # Inicializar sistema keep alive para Render
            if os.getenv('RENDER'):
                self.keep_alive = KeepAlive(self)
                await self.keep_alive.start()
                logger.info("üîÑ Sistema keep alive iniciado para Render")
            
            # Sincronizar comandos slash
            synced = await self.tree.sync()
            logger.info(f"Sincronizados {len(synced)} comandos slash")
            
            # Configurar sistema de m√∫sica
            await self.music_system.setup_hook()
            
            # Iniciar tarefas autom√°ticas
            if not self.auto_update_ranks.is_running():
                self.auto_update_ranks.start()
            
            # Iniciar sistema de notifica√ß√µes
            self.notifications_system.start_tasks()
            
            # Iniciar sistema de canais din√¢micos
            await self.dynamic_channels.start_cleanup_task()
            
            # Iniciar sistema de canais de m√∫sica
            await self.music_channels.start_cleanup_task()
            
            # Iniciar sistema de notifica√ß√µes de check-in
            asyncio.create_task(self.checkin_notifications.start_cleanup_task())
            
            # Iniciar sistema de lembretes de check-in
            self.checkin_reminders.start_reminder_task()
            
            # Carregar comandos de check-in
            try:
                await self.load_extension('checkin_commands')
                logger.info("Comandos de check-in carregados com sucesso")
            except Exception as e:
                logger.error(f"Erro ao carregar comandos de check-in: {e}")
                
            # Carregar comandos administrativos de check-in
            try:
                await self.load_extension('checkin_admin')
                logger.info("Comandos administrativos de check-in carregados com sucesso")
            except Exception as e:
                logger.error(f"Erro ao carregar comandos administrativos de check-in: {e}")
                
            # Carregar comandos de lembretes
            try:
                await self.load_extension('reminder_commands')
                logger.info("Comandos de lembretes carregados com sucesso")
            except Exception as e:
                logger.error(f"Erro ao carregar comandos de lembretes: {e}")
                
            # Carregar comandos de relat√≥rios
            try:
                await self.load_extension('report_commands')
                logger.info("Comandos de relat√≥rios carregados com sucesso")
            except Exception as e:
                logger.error(f"Erro ao carregar comandos de relat√≥rios: {e}")
                
        except Exception as e:
            logger.error(f"Erro no setup_hook: {e}")
    
    async def close(self):
        """M√©todo chamado quando o bot √© desligado"""
        # Parar sistema keep alive se estiver rodando
        if hasattr(self, 'keep_alive') and self.keep_alive:
            await self.keep_alive.stop()
            logger.info("üîÑ Sistema keep alive parado")
        
        # Fechar conex√£o do storage
        if hasattr(self.storage, 'close'):
            await self.storage.close()
            logger.info("üíæ Conex√£o do armazenamento fechada")
        
        await super().close()
    
    async def on_ready(self):
        """Evento quando bot fica online"""
        logger.info(f'{self.user} est√° online!')
        logger.info(f'Bot conectado em {len(self.guilds)} servidor(es)')
        
        # Sincroniza√ß√£o de comandos desabilitada temporariamente devido ao rate limiting
        # Os comandos existentes continuar√£o funcionando normalmente
        logger.info("‚ö†Ô∏è Sincroniza√ß√£o de comandos slash desabilitada temporariamente")
        logger.info("‚ÑπÔ∏è Comandos existentes continuar√£o funcionando normalmente")
        
        # Iniciar dashboard web em thread separada
        try:
            import threading
            # Configurar host e porta para Render
            host = '0.0.0.0' if os.getenv('RENDER') else 'localhost'
            port = int(os.getenv('PORT', 5000))  # Render usa vari√°vel PORT
            
            dashboard_thread = threading.Thread(
                target=self.web_dashboard.run,
                kwargs={'host': host, 'port': port, 'debug': False}
            )
            dashboard_thread.daemon = True
            dashboard_thread.start()
            logger.info(f"Dashboard web iniciado em http://{host}:{port}")
        except Exception as e:
            logger.error(f"Erro ao iniciar dashboard web: {e}")
        
        # Definir status do bot
        activity = discord.Activity(
            type=discord.ActivityType.watching,
            name="Hawk Esports | /help"
        )
        await self.change_presence(status=discord.Status.online, activity=activity)
    
    async def on_member_join(self, member):
        """Evento quando novo membro entra no servidor"""
        await self.registration.handle_new_member(member)
        await self.moderation_system.handle_member_join(member)
        # Integra√ß√£o autom√°tica com stats PUBG para novos membros
        await self.dual_ranking_system.auto_update_new_member_pubg(member)
    
    async def on_voice_state_update(self, member, before, after):
        """Evento para gerenciar canais din√¢micos e canais de m√∫sica"""
        await self.dynamic_channels.on_voice_state_update(member, before, after)
        await self.music_channels.on_voice_state_update(member, before, after)
    
    async def on_message(self, message):
        """Evento para monitorar mensagens (Medal integration e modera√ß√£o)"""
        if not message.author.bot:
            await self.medal_integration.process_message(message)
            # Verificar modera√ß√£o autom√°tica
            await self.moderation_system.check_message(message)
        
        await self.process_commands(message)
    
    async def on_reaction_add(self, reaction, user):
        """Evento para rea√ß√µes (Quiz mini-games)"""
        if user.bot:
            return
        
        # Verificar se √© resposta de quiz
        quiz_result = await self.minigames_system.check_quiz_answer(reaction, user)
        if quiz_result:
            await reaction.message.channel.send(embed=quiz_result)
    
    async def _sync_commands_with_retry(self, max_retries: int = 3):
        """Sincroniza comandos slash com tratamento de rate limit"""
        for attempt in range(max_retries):
            try:
                synced = await self.tree.sync()
                logger.info(f"‚úÖ Sincronizados {len(synced)} comandos slash com sucesso!")
                return
            except discord.HTTPException as e:
                if e.status == 429:  # Rate limited
                    retry_after = getattr(e, 'retry_after', 60)
                    logger.warning(f"‚ö†Ô∏è Rate limit detectado. Aguardando {retry_after:.1f} segundos antes de tentar novamente...")
                    logger.warning(f"Tentativa {attempt + 1}/{max_retries}")
                    
                    if attempt < max_retries - 1:  # N√£o esperar na √∫ltima tentativa
                        await asyncio.sleep(retry_after)
                    else:
                        logger.error("‚ùå M√°ximo de tentativas de sincroniza√ß√£o atingido. Comandos slash podem n√£o estar atualizados.")
                        logger.info("‚ÑπÔ∏è O bot continuar√° funcionando normalmente. Os comandos ser√£o sincronizados na pr√≥xima reinicializa√ß√£o.")
                else:
                    logger.error(f"‚ùå Erro HTTP ao sincronizar comandos: {e}")
                    break
            except Exception as e:
                logger.error(f"‚ùå Erro inesperado ao sincronizar comandos: {e}")
                break
    
    @tasks.loop(minutes=30)
    async def auto_update_ranks(self):
        """Atualiza√ß√£o autom√°tica de ranks a cada 30 minutos (tempo real)"""
        try:
            for guild in self.guilds:
                await self.rank_system.update_all_ranks(guild)
                
                # Atualizar cargos PUBG autom√°ticos se habilitado
                if hasattr(self, 'pubg_rank_roles') and self.pubg_rank_roles.config.get('enabled', False):
                    updated_count = await self.pubg_rank_roles.update_all_member_ranks(guild)
                    if updated_count > 0:
                        logger.info(f"Cargos PUBG atualizados automaticamente: {updated_count} membros")
                
                # Verificar emblemas automaticamente se habilitado
                if hasattr(self, 'badge_system'):
                    config = await self.badge_system.get_config(guild.id)
                    if config.get('enabled', False) and config.get('auto_check', True):
                        updated_badges = await self.badge_system.check_all_members(guild)
                        if updated_badges > 0:
                            logger.info(f"Emblemas atualizados automaticamente: {updated_badges} membros")
                
                # Verificar temporadas automaticamente se habilitado
                if hasattr(self, 'season_system') and self.season_system.config.get('enabled', False):
                    current_season = self.season_system.get_current_season()
                    if current_season and current_season.has_ended():
                        await self.season_system.end_season(current_season)
                        logger.info(f"Temporada '{current_season.name}' finalizada automaticamente")
                
                # Verificar e resetar rankings temporais automaticamente
                if hasattr(self, 'dual_ranking_system'):
                    # Verificar reset di√°rio (00:00)
                    if self.dual_ranking_system._should_reset_temporal_ranking('daily'):
                        await self.dual_ranking_system._reset_temporal_ranking('daily')
                        logger.info("Ranking di√°rio resetado automaticamente")
                    
                    # Verificar reset semanal (segunda-feira 00:00)
                    if self.dual_ranking_system._should_reset_temporal_ranking('weekly'):
                        await self.dual_ranking_system._reset_temporal_ranking('weekly')
                        logger.info("Ranking semanal resetado automaticamente")
                    
                    # Verificar reset mensal (dia 1 do m√™s 00:00)
                    if self.dual_ranking_system._should_reset_temporal_ranking('monthly'):
                        await self.dual_ranking_system._reset_temporal_ranking('monthly')
                        logger.info("Ranking mensal resetado automaticamente")
                        
            logger.info("Ranks e emblemas atualizados automaticamente (tempo real)")
        except Exception as e:
            logger.error(f"Erro na atualiza√ß√£o autom√°tica de ranks: {e}")

# Instanciar o bot
bot = HawkBot()

# ==================== COMANDOS SLASH ====================

@bot.tree.command(name="setup_server", description="üîß Configura automaticamente o servidor do cl√£ Hawk Esports")
@discord.app_commands.describe(
    confirmar="Digite 'CONFIRMAR' para criar toda a estrutura do servidor"
)
async def setup_server(interaction: discord.Interaction, confirmar: str):
    """Comando para configurar servidor automaticamente"""
    # Verifica√ß√£o removida - qualquer usu√°rio pode executar
    # if not interaction.user.guild_permissions.administrator:
    #     embed = discord.Embed(
    #         title="‚ùå Acesso Negado",
    #         description="Apenas administradores podem executar este comando.",
    #         color=discord.Color.red()
    #     )
    #     await interaction.response.send_message(embed=embed, ephemeral=True)
    #     return
    
    if confirmar.upper() != "CONFIRMAR":
        embed = discord.Embed(
            title="‚ö†Ô∏è Confirma√ß√£o Necess√°ria",
            description="Digite `/setup_server confirmar:CONFIRMAR` para prosseguir.",
            color=discord.Color.orange()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    success = await bot.server_setup.setup_complete_server(interaction.guild)
    
    if success:
        embed = discord.Embed(
            title="‚úÖ Servidor Configurado!",
            description="**Hawk Esports** est√° pronto para a√ß√£o!\n\n" +
                       "üìã Novos membros devem usar `/register_pubg` no canal de registro.",
            color=discord.Color.green()
        )
    else:
        embed = discord.Embed(
            title="‚ùå Erro na Configura√ß√£o",
            description="Ocorreu um erro durante a configura√ß√£o. Verifique os logs.",
            color=discord.Color.red()
        )
    
    await interaction.followup.send(embed=embed)

@bot.tree.command(name="register_pubg", description="üìã Registra seu nick PUBG no cl√£ Hawk Esports")
@discord.app_commands.describe(
    nome="Seu nick exato no PUBG",
    shard="Plataforma: steam, psn, xbox, kakao"
)
@discord.app_commands.choices(shard=[
    discord.app_commands.Choice(name="Steam (PC)", value="steam"),
    discord.app_commands.Choice(name="PlayStation", value="psn"),
    discord.app_commands.Choice(name="Xbox", value="xbox"),
    discord.app_commands.Choice(name="Kakao", value="kakao")
])
async def register_pubg(interaction: discord.Interaction, nome: str, shard: str):
    """Comando para registrar jogador PUBG"""
    await interaction.response.defer()
    success = await bot.registration.register_player(interaction.user, nome, shard)
    
    if success:
        embed = discord.Embed(
            title="‚úÖ Registro Conclu√≠do!",
            description=f"**Bem-vindo ao Hawk Esports, {interaction.user.mention}!**\n\n" +
                       f"üéÆ **Nick PUBG:** {nome}\n" +
                       f"üåê **Plataforma:** {shard.upper()}\n" +
                       f"üèÜ **Role:** Acesso liberado\n\n" +
                       "Use `/meu_status` para verificar suas informa√ß√µes.",
            color=discord.Color.green()
        )
        embed.set_footer(text="Hawk Esports - Rumo √† vit√≥ria!")
    else:
        embed = discord.Embed(
            title="‚ùå Erro no Registro",
            description="N√£o foi poss√≠vel completar seu registro. Tente novamente.",
            color=discord.Color.red()
        )
    
    await interaction.followup.send(embed=embed)

@bot.tree.command(name="meu_status", description="üìä Verifica seu status de registro e cargo atual")
async def meu_status(interaction: discord.Interaction):
    """Comando para verificar status do jogador"""
    await interaction.response.defer()
    status_info = await bot.registration.get_player_status(interaction.user)
    
    embed = discord.Embed(
        title="üìä Seu Status - Hawk Esports",
        description=status_info,
        color=discord.Color.blue()
    )
    embed.set_footer(text="Hawk Esports - Sempre evoluindo!")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@bot.tree.command(name="leaderboard", description="üèÜ Mostra o ranking do cl√£ Hawk Esports")
@discord.app_commands.describe(
    modo="Modo de jogo para o ranking",
    periodo="Per√≠odo do ranking"
)
@discord.app_commands.choices(
    modo=[
        discord.app_commands.Choice(name="Squad", value="squad"),
        discord.app_commands.Choice(name="Duo", value="duo"),
        discord.app_commands.Choice(name="Solo", value="solo")
    ],
    periodo=[
        discord.app_commands.Choice(name="Di√°rio", value="daily"),
        discord.app_commands.Choice(name="Semanal", value="weekly"),
        discord.app_commands.Choice(name="Mensal", value="monthly"),
        discord.app_commands.Choice(name="Temporada", value="season")
    ]
)
async def leaderboard(interaction: discord.Interaction, modo: str = "squad", periodo: str = "weekly"):
    """Comando para mostrar leaderboard"""
    await interaction.response.defer()
    
    # Se for um per√≠odo temporal (di√°rio, semanal, mensal), usar o novo m√©todo
    if periodo in ["daily", "weekly", "monthly"]:
        embed = await bot.rank_system.generate_temporal_leaderboard(interaction.guild, modo, periodo)
    else:
        embed = await bot.rank_system.generate_leaderboard(interaction.guild, modo, periodo)
    
    await interaction.followup.send(embed=embed)

@bot.tree.command(name="clipes", description="üé¨ Lista os √∫ltimos clipes de um jogador")
@discord.app_commands.describe(
    jogador="Mencione o jogador ou deixe vazio para seus clipes"
)
async def clipes(interaction: discord.Interaction, jogador: discord.Member = None):
    """Comando para listar clipes"""
    target_user = jogador or interaction.user
    await interaction.response.defer()
    
    clips_embed = await bot.medal_integration.create_clips_list_embed(str(target_user.id))
    await interaction.followup.send(embed=clips_embed)

@bot.tree.command(name="help", description="‚ùì Mostra todos os comandos dispon√≠veis")
async def help_command(interaction: discord.Interaction):
    """Comando de ajuda"""
    embed = discord.Embed(
        title="ü¶Ö Hawk Esports - Comandos Dispon√≠veis",
        description="Bot oficial do cl√£ para automa√ß√£o completa!",
        color=discord.Color.gold()
    )
    
    embed.add_field(
        name="üîß Administra√ß√£o",
        value="`/setup_server` - Configura servidor automaticamente",
        inline=False
    )
    
    embed.add_field(
        name="üìã Registro",
        value="`/register_pubg` - Registra seu nick PUBG\n" +
              "`/meu_status` - Verifica seu status",
        inline=False
    )
    
    embed.add_field(
        name="üèÜ Rankings",
        value="`/leaderboard` - Mostra ranking do cl√£\n" +
              "`/ranking_pubg` - Ranking PUBG real\n" +
              "`/ranking_servidor` - Ranking interno\n" +
              "`/meu_rank_duplo` - Seus ranks completos",
        inline=False
    )
    
    embed.add_field(
        name="üèÖ Badges",
        value="`/badges_pubg` - Seus badges PUBG\n" +
              "`/badges_servidor` - Seus badges do servidor\n" +
              "`/todos_badges` - Lista todos os badges\n" +
              "`/conquistas` - Sistema de conquistas",
        inline=False
    )
    
    embed.add_field(
        name="üé¨ Clipes",
        value="`/clipes` - Lista clipes de jogadores",
        inline=False
    )
    
    embed.add_field(
        name="üèÜ Torneios",
        value="`/criar_torneio` - Cria novo torneio\n" +
              "`/participar_torneio` - Participa de torneio\n" +
              "`/torneios` - Lista torneios ativos\n" +
              "`/bracket` - Mostra bracket do torneio\n" +
              "`/resultado_partida` - Reporta resultado",
        inline=False
    )
    
    embed.add_field(
        name="üåê Dashboard Web",
        value="`/dashboard` - Acessa dashboard web completo",
        inline=False
    )
    
    embed.add_field(
        name="üèÜ Conquistas",
        value="`/conquistas` - V√™ suas conquistas e badges\n" +
              "`/conquistas_lista` - Lista todas as conquistas\n" +
              "`/ranking_conquistas` - Ranking de conquistas",
        inline=False
    )
    
    embed.add_field(
        name="üéµ M√∫sica",
        value="`/play` - Toca m√∫sica no canal de voz\n" +
              "`/pause` - Pausa/retoma m√∫sica atual\n" +
              "`/skip` - Pula m√∫sica atual\n" +
              "`/queue` - Mostra fila de m√∫sicas\n" +
              "`/volume` - Define volume (0-100)\n" +
              "`/loop` - Ativa/desativa repeti√ß√£o\n" +
              "`/shuffle` - Embaralha fila\n" +
              "`/stop` - Para m√∫sica e limpa fila\n" +
              "`/disconnect` - Desconecta do canal de voz",
        inline=False
    )
    
    embed.set_footer(text="Hawk Esports - Dominando os campos de batalha!")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# ==================== COMANDOS DE TORNEIO ====================

@bot.tree.command(name="criar_torneio", description="üèÜ Cria um novo torneio interno")
@discord.app_commands.describe(
    nome="Nome do torneio",
    tipo="Tipo de torneio",
    max_participantes="N√∫mero m√°ximo de participantes (padr√£o: 16)",
    premio="Pr√™mio do torneio (opcional)"
)
@discord.app_commands.choices(tipo=[
    discord.app_commands.Choice(name="Elimina√ß√£o Simples", value="single_elimination"),
    discord.app_commands.Choice(name="Elimina√ß√£o Dupla", value="double_elimination"),
    discord.app_commands.Choice(name="Round Robin", value="round_robin")
])
async def criar_torneio(interaction: discord.Interaction, nome: str, tipo: str, max_participantes: int = 16, premio: str = None):
    """Comando para criar um novo torneio"""
    await bot.tournament_system.create_tournament_command(interaction, nome, tipo, max_participantes, premio)

@bot.tree.command(name="participar_torneio", description="üéÆ Participa de um torneio ativo")
@discord.app_commands.describe(
    torneio_id="ID do torneio para participar"
)
async def participar_torneio(interaction: discord.Interaction, torneio_id: str):
    """Comando para participar de um torneio"""
    await bot.tournament_system.join_tournament_command(interaction, torneio_id)

@bot.tree.command(name="torneios", description="üèÜ Lista todos os torneios ativos")
async def listar_torneios(interaction: discord.Interaction):
    """Comando para listar torneios ativos"""
    await bot.tournament_system.list_tournaments_command(interaction)

@bot.tree.command(name="bracket", description="üóÇÔ∏è Mostra o bracket de um torneio")
@discord.app_commands.describe(
    torneio_id="ID do torneio para ver o bracket"
)
async def ver_bracket(interaction: discord.Interaction, torneio_id: str):
    """Comando para ver o bracket de um torneio"""
    await bot.tournament_system.show_bracket_command(interaction, torneio_id)

@bot.tree.command(name="resultado_partida", description="‚öîÔ∏è Reporta o resultado de uma partida de torneio")
@discord.app_commands.describe(
    torneio_id="ID do torneio",
    partida_id="ID da partida",
    vencedor="Mencione o jogador vencedor"
)
async def resultado_partida(interaction: discord.Interaction, torneio_id: str, partida_id: str, vencedor: discord.Member):
    """Comando para reportar resultado de partida"""
    await bot.tournament_system.report_match_result_command(interaction, torneio_id, partida_id, vencedor)

@bot.tree.command(name="dashboard", description="üåê Acessa o dashboard web do cl√£")
async def dashboard_command(interaction: discord.Interaction):
    """Comando para acessar o dashboard web"""
    embed = discord.Embed(
        title="üåê Dashboard Web - Hawk Esports",
        description="Acesse o dashboard completo com estat√≠sticas em tempo real!",
        color=discord.Color.gold()
    )
    
    embed.add_field(
        name="üìä Recursos Dispon√≠veis",
        value="‚Ä¢ Estat√≠sticas gerais do cl√£\n" +
              "‚Ä¢ Leaderboard em tempo real\n" +
              "‚Ä¢ Status dos torneios ativos\n" +
              "‚Ä¢ Clipes recentes dos membros\n" +
              "‚Ä¢ Gr√°ficos e an√°lises detalhadas",
        inline=False
    )
    
    # Configurar URL baseado no ambiente
    if os.getenv('RENDER'):
        dashboard_url = "https://hawk-esports-bot.onrender.com"  # Substitua pela sua URL do Render
    else:
        dashboard_url = "http://localhost:5000"
    
    embed.add_field(
        name="üîó Link de Acesso",
        value=f"[**Clique aqui para acessar o Dashboard**]({dashboard_url})",
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è Informa√ß√µes",
        value="O dashboard √© atualizado automaticamente a cada 30 segundos\n" +
              "Funciona melhor em navegadores modernos (Chrome, Firefox, Edge)",
        inline=False
    )
    
    embed.set_footer(text="Hawk Esports - Dashboard Web Profissional")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="conquistas", description="üèÜ V√™ suas conquistas e badges")
@discord.app_commands.describe(
    usuario="Mencione um usu√°rio para ver suas conquistas (opcional)"
)
async def conquistas(interaction: discord.Interaction, usuario: discord.Member = None):
    """Comando para ver conquistas de um usu√°rio"""
    await bot.achievement_system.achievements_command(interaction, usuario)

@bot.tree.command(name="badges_pubg", description="üéÆ Mostra seus badges PUBG espec√≠ficos")
@discord.app_commands.describe(
    usuario="Mencione um usu√°rio para ver seus badges PUBG (opcional)"
)
async def badges_pubg(interaction: discord.Interaction, usuario: discord.Member = None):
    """Comando para ver badges PUBG de um usu√°rio"""
    await interaction.response.defer()
    
    target_user = usuario or interaction.user
    
    try:
        embed = await bot.dual_ranking_system.show_pubg_badges(target_user)
        await interaction.followup.send(embed=embed)
    except Exception as e:
        logger.error(f"Erro no comando badges_pubg: {e}")
        await interaction.followup.send("‚ùå Erro ao obter badges PUBG. Tente novamente.", ephemeral=True)

@bot.tree.command(name="badges_servidor", description="üè† Mostra seus badges do servidor")
@discord.app_commands.describe(
    usuario="Mencione um usu√°rio para ver seus badges do servidor (opcional)"
)
async def badges_servidor(interaction: discord.Interaction, usuario: discord.Member = None):
    """Comando para ver badges do servidor de um usu√°rio"""
    await interaction.response.defer()
    
    target_user = usuario or interaction.user
    
    try:
        embed = await bot.dual_ranking_system.show_server_badges(target_user)
        await interaction.followup.send(embed=embed)
    except Exception as e:
        logger.error(f"Erro no comando badges_servidor: {e}")
        await interaction.followup.send("‚ùå Erro ao obter badges do servidor. Tente novamente.", ephemeral=True)

@bot.tree.command(name="todos_badges", description="üèÜ Mostra todos os badges dispon√≠veis no sistema")
async def todos_badges(interaction: discord.Interaction):
    """Comando para mostrar todos os badges dispon√≠veis"""
    await interaction.response.defer()
    
    try:
        embed = await bot.dual_ranking_system.show_all_available_badges()
        await interaction.followup.send(embed=embed)
    except Exception as e:
        logger.error(f"Erro no comando todos_badges: {e}")
        await interaction.followup.send("‚ùå Erro ao obter lista de badges. Tente novamente.", ephemeral=True)

@bot.tree.command(name="conquistas_lista", description="üìã Lista todas as conquistas dispon√≠veis")
@discord.app_commands.describe(
    categoria="Filtrar por categoria espec√≠fica (opcional)"
)
@discord.app_commands.choices(categoria=[
    discord.app_commands.Choice(name="Registro", value="registro"),
    discord.app_commands.Choice(name="Combate", value="combate"),
    discord.app_commands.Choice(name="Vit√≥ria", value="vitoria"),
    discord.app_commands.Choice(name="Participa√ß√£o", value="participacao"),
    discord.app_commands.Choice(name="Torneio", value="torneio"),
    discord.app_commands.Choice(name="Conte√∫do", value="conteudo"),
    discord.app_commands.Choice(name="Precis√£o", value="precisao"),
    discord.app_commands.Choice(name="Sobreviv√™ncia", value="sobrevivencia"),
    discord.app_commands.Choice(name="Ve√≠culo", value="veiculo"),
    discord.app_commands.Choice(name="Armas", value="armas"),
    discord.app_commands.Choice(name="Explosivos", value="explosivos"),
    discord.app_commands.Choice(name="Tempo", value="tempo"),
    discord.app_commands.Choice(name="Equipe", value="equipe"),
    discord.app_commands.Choice(name="Streak", value="streak"),
    discord.app_commands.Choice(name="Rank", value="rank"),
    discord.app_commands.Choice(name="Especial", value="especial")
])
async def conquistas_lista(interaction: discord.Interaction, categoria: str = None):
    """Comando para listar todas as conquistas dispon√≠veis"""
    await bot.achievement_system.achievements_list_command(interaction, categoria)

@bot.tree.command(name="ranking_conquistas", description="üèÖ Mostra o ranking de conquistas do cl√£")
async def ranking_conquistas(interaction: discord.Interaction):
    """Comando para mostrar leaderboard de conquistas"""
    await bot.achievement_system.achievements_leaderboard_command(interaction)

# ==================== COMANDOS DE RANKING DUPLO ====================

@bot.tree.command(name="ranking_pubg", description="üéÆ Mostra o ranking PUBG baseado em stats reais")
@discord.app_commands.describe(
    modo="Modo de jogo para o ranking",
    periodo="Per√≠odo do ranking",
    limite="N√∫mero de jogadores no ranking (m√°ximo 20)"
)
@discord.app_commands.choices(
    modo=[
        discord.app_commands.Choice(name="Squad", value="squad"),
        discord.app_commands.Choice(name="Duo", value="duo"),
        discord.app_commands.Choice(name="Solo", value="solo")
    ],
    periodo=[
        discord.app_commands.Choice(name="Di√°rio", value="daily"),
        discord.app_commands.Choice(name="Semanal", value="weekly"),
        discord.app_commands.Choice(name="Mensal", value="monthly"),
        discord.app_commands.Choice(name="Temporada", value="season")
    ]
)
async def ranking_pubg(interaction: discord.Interaction, modo: str = "squad", periodo: str = "weekly", limite: int = 10):
    """Comando para mostrar ranking PUBG real"""
    await interaction.response.defer()
    
    try:
        # Se for um per√≠odo temporal, usar o novo m√©todo
        if periodo in ["daily", "weekly", "monthly"]:
            embed = await bot.rank_system.generate_temporal_leaderboard(
                interaction.guild, 
                modo, 
                periodo,
                limit=min(limite, 20)
            )
        else:
            embed = await bot.dual_ranking_system.generate_leaderboard(
                interaction.guild, 
                "pubg_real", 
                modo, 
                min(limite, 20)
            )
        await interaction.followup.send(embed=embed)
    except Exception as e:
        logger.error(f"Erro no comando ranking_pubg: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar ranking PUBG. Tente novamente.", ephemeral=True)

@bot.tree.command(name="ranking_servidor", description="üèõÔ∏è Mostra o ranking interno do servidor")
@discord.app_commands.describe(
    periodo="Per√≠odo do ranking",
    limite="N√∫mero de jogadores no ranking (m√°ximo 20)"
)
@discord.app_commands.choices(
    periodo=[
        discord.app_commands.Choice(name="Di√°rio", value="daily"),
        discord.app_commands.Choice(name="Semanal", value="weekly"),
        discord.app_commands.Choice(name="Mensal", value="monthly"),
        discord.app_commands.Choice(name="Temporada", value="season")
    ]
)
async def ranking_servidor(interaction: discord.Interaction, periodo: str = "weekly", limite: int = 10):
    """Comando para mostrar ranking interno do servidor"""
    await interaction.response.defer()
    
    try:
        # Se for um per√≠odo temporal, usar o novo m√©todo
        if periodo in ["daily", "weekly", "monthly"]:
            embed = await bot.rank_system.generate_temporal_leaderboard(
                interaction.guild, 
                "squad",  # Modo padr√£o para ranking do servidor
                periodo,
                limit=min(limite, 20),
                server_ranking=True
            )
        else:
            embed = await bot.dual_ranking_system.generate_leaderboard(
                interaction.guild, 
                "server_internal", 
                None, 
                min(limite, 20)
            )
        await interaction.followup.send(embed=embed)
    except Exception as e:
        logger.error(f"Erro no comando ranking_servidor: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar ranking do servidor. Tente novamente.", ephemeral=True)

@bot.tree.command(name="meu_rank_duplo", description="üìä Mostra seus ranks PUBG e interno do servidor")
async def meu_rank_duplo(interaction: discord.Interaction):
    """Comando para mostrar ambos os ranks do usu√°rio"""
    await interaction.response.defer()
    
    try:
        embed = await bot.dual_ranking_system.get_user_profile_embed(interaction.user)
        await interaction.followup.send(embed=embed)
    except Exception as e:
        logger.error(f"Erro no comando meu_rank_duplo: {e}")
        await interaction.followup.send("‚ùå Erro ao obter seu perfil. Tente novamente.", ephemeral=True)

@bot.tree.command(name="atividade_servidor", description="üìà Mostra suas estat√≠sticas de atividade no servidor")
async def atividade_servidor(interaction: discord.Interaction):
    """Comando para mostrar estat√≠sticas de atividade"""
    await interaction.response.defer()
    
    try:
        stats = await bot.dual_ranking_system.get_activity_stats(interaction.user.id)
        
        embed = discord.Embed(
            title="üìà Suas Estat√≠sticas de Atividade",
            description=f"Estat√≠sticas de {interaction.user.display_name}",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üí¨ Mensagens",
            value=f"**Hoje**: {stats.get('messages_today', 0)}\n**Total**: {stats.get('total_messages', 0)}",
            inline=True
        )
        
        embed.add_field(
            name="üé§ Tempo em Voz",
            value=f"**Hoje**: {stats.get('voice_today', 0)} min\n**Total**: {stats.get('total_voice_time', 0)} min",
            inline=True
        )
        
        embed.add_field(
            name="üèÜ Pontos do Servidor",
            value=f"**Hoje**: {stats.get('points_today', 0)}\n**Total**: {stats.get('server_points', 0)}",
            inline=True
        )
        
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_footer(text="Hawk Bot - Sistema de Ranking Duplo")
        
        await interaction.followup.send(embed=embed)
    except Exception as e:
        logger.error(f"Erro no comando atividade_servidor: {e}")
        await interaction.followup.send("‚ùå Erro ao obter estat√≠sticas. Tente novamente.", ephemeral=True)

# ==================== COMANDOS DE M√öSICA ====================

@bot.tree.command(name="play", description="üéµ Toca uma m√∫sica no canal de voz")
@discord.app_commands.describe(
    musica="Nome da m√∫sica ou URL do YouTube"
)
async def play_music(interaction: discord.Interaction, musica: str):
    """Comando para tocar m√∫sica"""
    # Verificar se o usu√°rio est√° em um canal de voz
    if not interaction.user.voice or not interaction.user.voice.channel:
        await interaction.response.send_message("‚ùå Voc√™ precisa estar em um canal de voz!", ephemeral=True)
        return
    
    await interaction.response.defer()
    
    try:
        success, message = await bot.music_system.play_song(
            interaction.guild.id,
            interaction.user.voice.channel,
            musica,
            interaction.user
        )
        
        if success:
            await interaction.followup.send(message)
        else:
            await interaction.followup.send(message, ephemeral=True)
            
    except Exception as e:
        await interaction.followup.send(f"‚ùå Erro ao tocar m√∫sica: {e}", ephemeral=True)

@bot.tree.command(name="pause", description="‚è∏Ô∏è Pausa ou retoma a m√∫sica atual")
async def pause_music(interaction: discord.Interaction):
    """Comando para pausar/retomar m√∫sica"""
    success, message = await bot.music_system.pause_resume(interaction.guild.id)
    await interaction.response.send_message(message, ephemeral=not success)

@bot.tree.command(name="skip", description="‚è≠Ô∏è Pula a m√∫sica atual")
async def skip_music(interaction: discord.Interaction):
    """Comando para pular m√∫sica"""
    success, message = await bot.music_system.skip_song(interaction.guild.id, interaction.user.id)
    await interaction.response.send_message(message)

@bot.tree.command(name="stop", description="‚èπÔ∏è Para a m√∫sica e limpa a fila")
async def stop_music(interaction: discord.Interaction):
    """Comando para parar m√∫sica"""
    success, message = await bot.music_system.stop_music(interaction.guild.id)
    await interaction.response.send_message(message)

@bot.tree.command(name="queue", description="üìù Mostra a fila de m√∫sicas")
async def show_queue(interaction: discord.Interaction):
    """Comando para mostrar fila de m√∫sicas"""
    queue_info = bot.music_system.get_queue_info(interaction.guild.id)
    
    embed = discord.Embed(
        title="üéµ Fila de M√∫sicas",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    # M√∫sica atual
    if queue_info['current_song']:
        current = queue_info['current_song']
        status = "‚è∏Ô∏è Pausada" if queue_info['is_paused'] else "‚ñ∂Ô∏è Tocando"
        loop_status = " üîÇ" if queue_info['loop_mode'] else ""
        
        embed.add_field(
            name=f"{status}{loop_status}",
            value=f"**{current.title}**\n" +
                  f"Dura√ß√£o: {current.format_duration()}\n" +
                  f"Solicitada por: {current.requester.mention}",
            inline=False
        )
    else:
        embed.add_field(
            name="Nenhuma m√∫sica tocando",
            value="Use `/play` para adicionar m√∫sicas!",
            inline=False
        )
    
    # Pr√≥ximas m√∫sicas
    if queue_info['queue']:
        next_songs = []
        for i, song in enumerate(list(queue_info['queue'])[:5], 1):
            next_songs.append(f"{i}. **{song.title}** ({song.format_duration()})")
        
        embed.add_field(
            name=f"üìù Pr√≥ximas ({queue_info['queue_length']} na fila)",
            value="\n".join(next_songs),
            inline=False
        )
        
        if queue_info['queue_length'] > 5:
            embed.add_field(
                name="",
                value=f"... e mais {queue_info['queue_length'] - 5} m√∫sicas",
                inline=False
            )
    
    # Informa√ß√µes adicionais
    embed.add_field(
        name="üîä Volume",
        value=f"{int(queue_info['volume'] * 100)}%",
        inline=True
    )
    
    embed.set_footer(text="Hawk Esports - Sistema de M√∫sica")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="volume", description="üîä Define o volume da m√∫sica (0-100)")
@discord.app_commands.describe(
    nivel="N√≠vel do volume (0-100)"
)
async def set_volume(interaction: discord.Interaction, nivel: int):
    """Comando para definir volume"""
    success, message = await bot.music_system.set_volume(interaction.guild.id, nivel)
    await interaction.response.send_message(message, ephemeral=not success)

@bot.tree.command(name="loop", description="üîÇ Ativa/desativa repeti√ß√£o da m√∫sica atual")
async def toggle_loop(interaction: discord.Interaction):
    """Comando para alternar modo de repeti√ß√£o"""
    success, message = await bot.music_system.toggle_loop(interaction.guild.id)
    await interaction.response.send_message(message)

@bot.tree.command(name="shuffle", description="üîÄ Embaralha a fila de m√∫sicas")
async def shuffle_queue(interaction: discord.Interaction):
    """Comando para embaralhar fila"""
    success, message = await bot.music_system.shuffle_queue(interaction.guild.id)
    await interaction.response.send_message(message, ephemeral=not success)

@bot.tree.command(name="disconnect", description="üëã Desconecta o bot do canal de voz")
async def disconnect_bot(interaction: discord.Interaction):
    """Comando para desconectar do canal de voz"""
    success, message = await bot.music_system.disconnect(interaction.guild.id)
    await interaction.response.send_message(message)

@bot.tree.command(name="nowplaying", description="üéµ Mostra a m√∫sica atual com barra de progresso")
async def now_playing(interaction: discord.Interaction):
    """Comando para mostrar m√∫sica atual com progresso"""
    player_info = bot.music_system.get_current_song_info(interaction.guild.id)
    
    if not player_info['current_song']:
        await interaction.response.send_message("‚ùå Nenhuma m√∫sica est√° tocando no momento!", ephemeral=True)
        return
    
    song = player_info['current_song']
    progress = player_info['progress']
    duration = song.duration
    
    # Criar barra de progresso visual
    progress_bar_length = 20
    filled_length = int(progress_bar_length * progress / duration) if duration > 0 else 0
    bar = "‚ñà" * filled_length + "‚ñë" * (progress_bar_length - filled_length)
    
    # Formatar tempo atual e total
    current_time = f"{int(progress // 60):02d}:{int(progress % 60):02d}"
    total_time = song.format_duration()
    
    embed = discord.Embed(
        title="üéµ Tocando Agora",
        description=f"**{song.title}**",
        color=discord.Color.green(),
        timestamp=datetime.now()
    )
    
    if song.thumbnail:
        embed.set_thumbnail(url=song.thumbnail)
    
    embed.add_field(
        name="‚è±Ô∏è Progresso",
        value=f"`{current_time}` {bar} `{total_time}`\n`{current_time}/{total_time}`",
        inline=False
    )
    
    embed.add_field(
        name="üë§ Solicitada por",
        value=song.requester.mention,
        inline=True
    )
    
    embed.add_field(
        name="üîä Volume",
        value=f"{int(player_info['volume'] * 100)}%",
        inline=True
    )
    
    status_icons = []
    if player_info['is_paused']:
        status_icons.append("‚è∏Ô∏è Pausada")
    else:
        status_icons.append("‚ñ∂Ô∏è Tocando")
    
    if player_info['loop_mode']:
        status_icons.append("üîÇ Loop")
    
    if status_icons:
        embed.add_field(
            name="üìä Status",
            value=" | ".join(status_icons),
            inline=True
        )
    
    # Pr√≥ximas m√∫sicas na fila
    if player_info['queue_length'] > 0:
        next_songs = []
        for i, next_song in enumerate(list(player_info['queue'])[:3], 1):
            next_songs.append(f"{i}. **{next_song.title}** ({next_song.format_duration()})")
        
        embed.add_field(
            name=f"üìù Pr√≥ximas ({player_info['queue_length']} na fila)",
            value="\n".join(next_songs) if next_songs else "Fila vazia",
            inline=False
        )
    
    embed.set_footer(text="Hawk Esports - Sistema de M√∫sica Avan√ßado")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="history", description="üìú Mostra o hist√≥rico de m√∫sicas tocadas")
@discord.app_commands.describe(
    limite="N√∫mero de m√∫sicas no hist√≥rico (m√°ximo 20)"
)
async def music_history(interaction: discord.Interaction, limite: int = 10):
    """Comando para mostrar hist√≥rico de m√∫sicas"""
    if limite > 20:
        limite = 20
    elif limite < 1:
        limite = 10
    
    history = bot.music_system.get_music_history(interaction.guild.id, limite)
    
    if not history:
        await interaction.response.send_message("üìú Nenhuma m√∫sica foi tocada ainda neste servidor!", ephemeral=True)
        return
    
    embed = discord.Embed(
        title="üìú Hist√≥rico de M√∫sicas",
        description=f"√öltimas {len(history)} m√∫sicas tocadas",
        color=discord.Color.purple(),
        timestamp=datetime.now()
    )
    
    history_text = []
    for i, song_info in enumerate(history, 1):
        song = song_info['song']
        played_at = song_info['played_at']
        time_ago = datetime.now() - played_at
        
        if time_ago.days > 0:
            time_str = f"{time_ago.days}d atr√°s"
        elif time_ago.seconds > 3600:
            time_str = f"{time_ago.seconds // 3600}h atr√°s"
        elif time_ago.seconds > 60:
            time_str = f"{time_ago.seconds // 60}m atr√°s"
        else:
            time_str = "Agora mesmo"
        
        history_text.append(
            f"`{i:2d}.` **{song.title}** ({song.format_duration()})\n"
            f"     üë§ {song.requester.display_name} ‚Ä¢ ‚è∞ {time_str}"
        )
    
    # Dividir em chunks se necess√°rio
    if len(history_text) <= 5:
        embed.add_field(
            name="üéµ M√∫sicas Tocadas",
            value="\n\n".join(history_text),
            inline=False
        )
    else:
        # Primeira metade
        embed.add_field(
            name="üéµ M√∫sicas Tocadas (Parte 1)",
            value="\n\n".join(history_text[:5]),
            inline=False
        )
        # Segunda metade
        if len(history_text) > 5:
            embed.add_field(
                name="üéµ M√∫sicas Tocadas (Parte 2)",
                value="\n\n".join(history_text[5:]),
                inline=False
            )
    
    embed.set_footer(text="Hawk Esports - Hist√≥rico de M√∫sica")
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="favorites", description="‚≠ê Gerencia suas m√∫sicas favoritas")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    posicao="Posi√ß√£o da m√∫sica na fila (para adicionar aos favoritos)"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="üìã Listar favoritas", value="list"),
    discord.app_commands.Choice(name="‚≠ê Adicionar atual", value="add_current"),
    discord.app_commands.Choice(name="‚ûï Adicionar da fila", value="add_queue"),
    discord.app_commands.Choice(name="üóëÔ∏è Remover", value="remove"),
    discord.app_commands.Choice(name="üéµ Tocar favorita", value="play")
])
async def music_favorites(interaction: discord.Interaction, acao: str, posicao: int = None):
    """Comando para gerenciar m√∫sicas favoritas"""
    user_id = interaction.user.id
    
    if acao == "list":
        favorites = bot.music_system.get_user_favorites(user_id)
        
        if not favorites:
            await interaction.response.send_message("‚≠ê Voc√™ ainda n√£o tem m√∫sicas favoritas!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="‚≠ê Suas M√∫sicas Favoritas",
            description=f"Voc√™ tem {len(favorites)} m√∫sica(s) favorita(s)",
            color=discord.Color.gold(),
            timestamp=datetime.now()
        )
        
        favorites_text = []
        for i, fav_info in enumerate(favorites, 1):
            song = fav_info['song']
            added_at = fav_info['added_at']
            
            favorites_text.append(
                f"`{i:2d}.` **{song.title}** ({song.format_duration()})\n"
                f"     üìÖ Adicionada em {added_at.strftime('%d/%m/%Y √†s %H:%M')}"
            )
        
        # Dividir em chunks se necess√°rio
        if len(favorites_text) <= 5:
            embed.add_field(
                name="üéµ Suas Favoritas",
                value="\n\n".join(favorites_text),
                inline=False
            )
        else:
            # Primeira metade
            embed.add_field(
                name="üéµ Suas Favoritas (Parte 1)",
                value="\n\n".join(favorites_text[:5]),
                inline=False
            )
            # Segunda metade
            if len(favorites_text) > 5:
                embed.add_field(
                    name="üéµ Suas Favoritas (Parte 2)",
                    value="\n\n".join(favorites_text[5:]),
                    inline=False
                )
        
        embed.set_footer(text="Use /favorites acao:tocar para tocar uma favorita")
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    elif acao == "add_current":
        current_info = bot.music_system.get_current_song_info(interaction.guild.id)
        
        if not current_info['current_song']:
            await interaction.response.send_message("‚ùå N√£o h√° m√∫sica tocando no momento!", ephemeral=True)
            return
        
        success, message = bot.music_system.add_to_favorites(user_id, current_info['current_song'])
        
        if success:
            embed = discord.Embed(
                title="‚≠ê M√∫sica Adicionada aos Favoritos!",
                description=f"**{current_info['current_song'].title}** foi adicionada √†s suas favoritas!",
                color=discord.Color.gold()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå {message}", ephemeral=True)
    
    elif acao == "add_queue":
        if posicao is None:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar a posi√ß√£o da m√∫sica na fila!", ephemeral=True)
            return
        
        queue_info = bot.music_system.get_queue_info(interaction.guild.id)
        
        if not queue_info['queue'] or posicao < 1 or posicao > len(queue_info['queue']):
            await interaction.response.send_message(f"‚ùå Posi√ß√£o inv√°lida! A fila tem {len(queue_info['queue'])} m√∫sica(s).", ephemeral=True)
            return
        
        song = queue_info['queue'][posicao - 1]
        success, message = bot.music_system.add_to_favorites(user_id, song)
        
        if success:
            embed = discord.Embed(
                title="‚≠ê M√∫sica Adicionada aos Favoritos!",
                description=f"**{song.title}** foi adicionada √†s suas favoritas!",
                color=discord.Color.gold()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå {message}", ephemeral=True)
    
    elif acao == "remove":
        if posicao is None:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar a posi√ß√£o da m√∫sica favorita para remover!", ephemeral=True)
            return
        
        success, message = bot.music_system.remove_from_favorites(user_id, posicao - 1)
        
        if success:
            await interaction.response.send_message(f"‚úÖ {message}", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå {message}", ephemeral=True)
    
    elif acao == "play":
        if posicao is None:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar a posi√ß√£o da m√∫sica favorita para tocar!", ephemeral=True)
            return
        
        # Verificar se usu√°rio est√° em canal de voz
        if not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.response.send_message("‚ùå Voc√™ precisa estar em um canal de voz!", ephemeral=True)
            return
        
        favorites = bot.music_system.get_user_favorites(user_id)
        
        if not favorites or posicao < 1 or posicao > len(favorites):
            await interaction.response.send_message(f"‚ùå Posi√ß√£o inv√°lida! Voc√™ tem {len(favorites)} m√∫sica(s) favorita(s).", ephemeral=True)
            return
        
        song = favorites[posicao - 1]['song']
        
        # Adicionar √† fila
        success, message = await bot.music_system.play_song(
            interaction.guild.id,
            interaction.user.voice.channel,
            song.url,
            interaction.user
        )
        
        if success:
            embed = discord.Embed(
                title="‚≠ê Favorita Adicionada √† Fila!",
                description=f"**{song.title}** foi adicionada √† fila!",
                color=discord.Color.gold()
            )
            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message(f"‚ùå {message}", ephemeral=True)

@bot.tree.command(name="playlist", description="üéµ Gerencia suas playlists personalizadas")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    nome="Nome da playlist",
    musica="URL ou nome da m√∫sica (para adicionar/remover)",
    posicao="Posi√ß√£o da m√∫sica (para remover)",
    publica="Tornar playlist p√∫blica (padr√£o: privada)"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="üìã Listar playlists", value="list"),
    discord.app_commands.Choice(name="‚ûï Criar playlist", value="create"),
    discord.app_commands.Choice(name="üóëÔ∏è Deletar playlist", value="delete"),
    discord.app_commands.Choice(name="üéµ Mostrar playlist", value="show"),
    discord.app_commands.Choice(name="‚ûï Adicionar m√∫sica", value="add"),
    discord.app_commands.Choice(name="‚ûñ Remover m√∫sica", value="remove"),
    discord.app_commands.Choice(name="‚ñ∂Ô∏è Tocar playlist", value="play"),
    discord.app_commands.Choice(name="üåê Playlists p√∫blicas", value="public")
])
async def playlist_manager(interaction: discord.Interaction, acao: str, nome: str = None, musica: str = None, posicao: int = None, publica: bool = False):
    """Comando para gerenciar playlists"""
    user_id = interaction.user.id
    
    if acao == "list":
        playlists = bot.music_system.get_user_playlists(user_id)
        
        if not playlists:
            await interaction.response.send_message("üéµ Voc√™ ainda n√£o tem playlists criadas!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üéµ Suas Playlists",
            description=f"Voc√™ tem {len(playlists)} playlist(s)",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        playlist_text = []
        for i, (playlist_name, playlist_data) in enumerate(playlists.items(), 1):
            visibility = "üåê P√∫blica" if playlist_data.get('public', False) else "üîí Privada"
            song_count = len(playlist_data.get('songs', []))
            created_at = playlist_data.get('created_at', datetime.now())
            
            playlist_text.append(
                f"`{i:2d}.` **{playlist_name}** ({song_count} m√∫sica(s))\n"
                f"     {visibility} ‚Ä¢ üìÖ {created_at.strftime('%d/%m/%Y')}"
            )
        
        if len(playlist_text) <= 10:
            embed.add_field(
                name="üìã Suas Playlists",
                value="\n\n".join(playlist_text),
                inline=False
            )
        else:
            # Dividir em duas partes
            embed.add_field(
                name="üìã Suas Playlists (Parte 1)",
                value="\n\n".join(playlist_text[:10]),
                inline=False
            )
            embed.add_field(
                name="üìã Suas Playlists (Parte 2)",
                value="\n\n".join(playlist_text[10:]),
                inline=False
            )
        
        embed.set_footer(text="Use /playlist acao:show nome:<nome> para ver uma playlist")
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    elif acao == "create":
        if not nome:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar o nome da playlist!", ephemeral=True)
            return
        
        success, message = bot.music_system.create_playlist(user_id, nome, publica)
        
        if success:
            visibility = "p√∫blica" if publica else "privada"
            embed = discord.Embed(
                title="‚úÖ Playlist Criada!",
                description=f"Playlist **{nome}** ({visibility}) foi criada com sucesso!",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå {message}", ephemeral=True)
    
    elif acao == "delete":
        if not nome:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar o nome da playlist!", ephemeral=True)
            return
        
        success, message = bot.music_system.delete_playlist(user_id, nome)
        
        if success:
            await interaction.response.send_message(f"‚úÖ {message}", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå {message}", ephemeral=True)
    
    elif acao == "show":
        if not nome:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar o nome da playlist!", ephemeral=True)
            return
        
        playlist_data = bot.music_system.get_playlist(user_id, nome)
        
        if not playlist_data:
            await interaction.response.send_message(f"‚ùå Playlist '{nome}' n√£o encontrada!", ephemeral=True)
            return
        
        songs = playlist_data.get('songs', [])
        visibility = "üåê P√∫blica" if playlist_data.get('public', False) else "üîí Privada"
        created_at = playlist_data.get('created_at', datetime.now())
        
        embed = discord.Embed(
            title=f"üéµ Playlist: {nome}",
            description=f"{visibility} ‚Ä¢ {len(songs)} m√∫sica(s) ‚Ä¢ Criada em {created_at.strftime('%d/%m/%Y')}",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        if not songs:
            embed.add_field(
                name="üì≠ Playlist Vazia",
                value="Esta playlist n√£o possui m√∫sicas ainda.\nUse `/playlist acao:add` para adicionar m√∫sicas!",
                inline=False
            )
        else:
            song_text = []
            for i, song_data in enumerate(songs, 1):
                duration_str = f"{song_data['duration'] // 60}:{song_data['duration'] % 60:02d}" if song_data['duration'] > 0 else "N/A"
                song_text.append(
                    f"`{i:2d}.` **{song_data['title']}** ({duration_str})"
                )
            
            # Dividir em chunks se necess√°rio
            if len(song_text) <= 15:
                embed.add_field(
                    name="üéµ M√∫sicas",
                    value="\n".join(song_text),
                    inline=False
                )
            else:
                # Primeira metade
                embed.add_field(
                    name="üéµ M√∫sicas (Parte 1)",
                    value="\n".join(song_text[:15]),
                    inline=False
                )
                # Segunda metade
                embed.add_field(
                    name="üéµ M√∫sicas (Parte 2)",
                    value="\n".join(song_text[15:]),
                    inline=False
                )
        
        embed.set_footer(text="Use /playlist acao:play para tocar esta playlist")
        await interaction.response.send_message(embed=embed)
    
    elif acao == "add":
        if not nome or not musica:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar o nome da playlist e a m√∫sica!", ephemeral=True)
            return
        
        # Buscar a m√∫sica
        await interaction.response.defer(ephemeral=True)
        
        song_data = await bot.music_system.search_song(musica)
        if not song_data:
            await interaction.followup.send("‚ùå N√£o foi poss√≠vel encontrar esta m√∫sica!", ephemeral=True)
            return
        
        success, message = bot.music_system.add_to_playlist(user_id, nome, song_data)
        
        if success:
            embed = discord.Embed(
                title="‚úÖ M√∫sica Adicionada!",
                description=f"**{song_data['title']}** foi adicionada √† playlist **{nome}**!",
                color=discord.Color.green()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
        else:
            await interaction.followup.send(f"‚ùå {message}", ephemeral=True)
    
    elif acao == "remove":
        if not nome:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar o nome da playlist!", ephemeral=True)
            return
        
        if posicao is None:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar a posi√ß√£o da m√∫sica para remover!", ephemeral=True)
            return
        
        success, message = bot.music_system.remove_from_playlist(user_id, nome, posicao - 1)
        
        if success:
            await interaction.response.send_message(f"‚úÖ {message}", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå {message}", ephemeral=True)
    
    elif acao == "play":
        if not nome:
            await interaction.response.send_message("‚ùå Voc√™ precisa especificar o nome da playlist!", ephemeral=True)
            return
        
        # Verificar se usu√°rio est√° em canal de voz
        if not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.response.send_message("‚ùå Voc√™ precisa estar em um canal de voz!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        success, message = await bot.music_system.play_playlist(interaction.guild.id, interaction.user.voice.channel, user_id, nome, interaction.user)
        
        if success:
            embed = discord.Embed(
                title="üéµ Playlist Adicionada √† Fila!",
                description=f"Playlist **{nome}** foi adicionada √† fila de m√∫sica!",
                color=discord.Color.green()
            )
            await interaction.followup.send(embed=embed)
        else:
            await interaction.followup.send(f"‚ùå {message}")
    
    elif acao == "public":
        public_playlists = bot.music_system.get_public_playlists()
        
        if not public_playlists:
            await interaction.response.send_message("üåê N√£o h√° playlists p√∫blicas dispon√≠veis no momento!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üåê Playlists P√∫blicas",
            description=f"Encontradas {len(public_playlists)} playlist(s) p√∫blica(s)",
            color=discord.Color.gold(),
            timestamp=datetime.now()
        )
        
        playlist_text = []
        for i, (owner_name, playlist_name, playlist_data) in enumerate(public_playlists, 1):
            song_count = len(playlist_data.get('songs', []))
            created_at = playlist_data.get('created_at', datetime.now())
            
            playlist_text.append(
                f"`{i:2d}.` **{playlist_name}** por {owner_name}\n"
                f"     üéµ {song_count} m√∫sica(s) ‚Ä¢ üìÖ {created_at.strftime('%d/%m/%Y')}"
            )
        
        if len(playlist_text) <= 10:
            embed.add_field(
                name="üåê Playlists Dispon√≠veis",
                value="\n\n".join(playlist_text),
                inline=False
            )
        else:
            # Dividir em duas partes
            embed.add_field(
                name="üåê Playlists Dispon√≠veis (Parte 1)",
                value="\n\n".join(playlist_text[:10]),
                inline=False
            )
            embed.add_field(
                name="üåê Playlists Dispon√≠veis (Parte 2)",
                value="\n\n".join(playlist_text[10:]),
                inline=False
            )
        
        embed.set_footer(text="Use /playlist acao:show nome:<nome> para ver uma playlist p√∫blica")
        await interaction.response.send_message(embed=embed)

# ==================== COMANDOS DE CANAIS DIN√ÇMICOS ====================

@bot.tree.command(name="dynamic_channels", description="üéÆ Gerenciar sistema de canais din√¢micos")
@app_commands.describe(
    acao="A√ß√£o a ser executada",
    canal="Canal de voz para configurar como trigger (apenas para 'add_trigger' e 'remove_trigger')"
)
@app_commands.choices(acao=[
    app_commands.Choice(name="üìä Status do Sistema", value="status"),
    app_commands.Choice(name="‚öôÔ∏è Configurar Servidor", value="setup"),
    app_commands.Choice(name="‚ûï Adicionar Canal Trigger", value="add_trigger"),
    app_commands.Choice(name="‚ûñ Remover Canal Trigger", value="remove_trigger"),
    app_commands.Choice(name="üìà Estat√≠sticas", value="stats"),
    app_commands.Choice(name="üîÑ Recarregar Config", value="reload")
])
async def dynamic_channels_cmd(interaction: discord.Interaction, acao: str, canal: discord.VoiceChannel = None):
    """Comando principal para gerenciar canais din√¢micos"""
    
    # Verificar permiss√µes
    if not interaction.user.guild_permissions.manage_channels:
        embed = discord.Embed(
            title="‚ùå Sem Permiss√£o",
            description="Voc√™ precisa da permiss√£o `Gerenciar Canais` para usar este comando.",
            color=0xFF0000
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    try:
        if acao == "status":
            config = bot.dynamic_channels.config
            temp_enabled = config.get('temp_channels', {}).get('enabled', True)
            rank_enabled = config.get('rank_channels', {}).get('enabled', True)
            
            embed = discord.Embed(
                title="üéÆ Status dos Canais Din√¢micos",
                color=0x00BFFF
            )
            embed.add_field(
                name="üìä Sistema Geral",
                value=f"Status: {'üü¢ Ativo' if (temp_enabled or rank_enabled) else 'üî¥ Inativo'}",
                inline=False
            )
            embed.add_field(
                name="üéÆ Canais Tempor√°rios",
                value=f"Status: {'üü¢ Ativo' if temp_enabled else 'üî¥ Inativo'}\n"
                      f"M√°ximo: {config.get('temp_channels', {}).get('max_temp_channels', 20)}\n"
                      f"Timeout: {config.get('temp_channels', {}).get('empty_timeout_minutes', 5)} min",
                inline=True
            )
            embed.add_field(
                name="üèÜ Canais por Patente",
                value=f"Status: {'üü¢ Ativo' if rank_enabled else 'üî¥ Inativo'}\n"
                      f"Min. membros: {config.get('rank_channels', {}).get('min_members_per_rank', 3)}",
                inline=True
            )
            
            trigger_channels = config.get('trigger_channels', [])
            if trigger_channels:
                channels_text = "\n".join([f"<#{ch_id}>" for ch_id in trigger_channels])
                embed.add_field(
                    name="üéØ Canais Trigger",
                    value=channels_text,
                    inline=False
                )
            else:
                embed.add_field(
                    name="üéØ Canais Trigger",
                    value="Nenhum configurado",
                    inline=False
                )
        
        elif acao == "setup":
            await bot.dynamic_channels.setup_trigger_channels(interaction.guild)
            embed = discord.Embed(
                title="‚úÖ Sistema Configurado",
                description="Sistema de canais din√¢micos foi configurado com sucesso!\n\n"
                           "üìã **Pr√≥ximos passos:**\n"
                           "‚Ä¢ Use `/dynamic_channels add_trigger` para adicionar canais trigger\n"
                           "‚Ä¢ Membros podem entrar nos canais trigger para criar salas tempor√°rias",
                color=0x00FF00
            )
        
        elif acao == "add_trigger":
            if not canal:
                embed = discord.Embed(
                    title="‚ùå Canal Necess√°rio",
                    description="Voc√™ deve especificar um canal de voz para adicionar como trigger.",
                    color=0xFF0000
                )
            else:
                success = await bot.dynamic_channels.add_trigger_channel(canal.id)
                if success:
                    embed = discord.Embed(
                        title="‚úÖ Canal Trigger Adicionado",
                        description=f"O canal {canal.mention} foi configurado como trigger.\n\n"
                                   "Agora quando membros entrarem neste canal, uma sala tempor√°ria ser√° criada automaticamente.",
                        color=0x00FF00
                    )
                else:
                    embed = discord.Embed(
                        title="‚ö†Ô∏è Canal j√° Configurado",
                        description=f"O canal {canal.mention} j√° est√° configurado como trigger.",
                        color=0xFFFF00
                    )
        
        elif acao == "remove_trigger":
            if not canal:
                embed = discord.Embed(
                    title="‚ùå Canal Necess√°rio",
                    description="Voc√™ deve especificar um canal de voz para remover como trigger.",
                    color=0xFF0000
                )
            else:
                success = await bot.dynamic_channels.remove_trigger_channel(canal.id)
                if success:
                    embed = discord.Embed(
                        title="‚úÖ Canal Trigger Removido",
                        description=f"O canal {canal.mention} foi removido dos triggers.",
                        color=0x00FF00
                    )
                else:
                    embed = discord.Embed(
                        title="‚ö†Ô∏è Canal n√£o Encontrado",
                        description=f"O canal {canal.mention} n√£o estava configurado como trigger.",
                        color=0xFFFF00
                    )
        
        elif acao == "stats":
            stats = bot.dynamic_channels.get_stats()
            embed = discord.Embed(
                title="üìà Estat√≠sticas dos Canais Din√¢micos",
                color=0x00BFFF
            )
            embed.add_field(
                name="üéÆ Canais Tempor√°rios",
                value=f"Ativos: {stats['temp_channels_active']}",
                inline=True
            )
            embed.add_field(
                name="üèÜ Canais por Patente",
                value=f"Total: {stats['rank_channels_total']}",
                inline=True
            )
            embed.add_field(
                name="üéØ Canais Trigger",
                value=f"Configurados: {stats['trigger_channels']}",
                inline=True
            )
        
        elif acao == "reload":
            bot.dynamic_channels.config = bot.dynamic_channels.load_config()
            embed = discord.Embed(
                title="üîÑ Configura√ß√£o Recarregada",
                description="As configura√ß√µes dos canais din√¢micos foram recarregadas do arquivo.",
                color=0x00FF00
            )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        logger.error(f"Erro no comando dynamic_channels: {e}")
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Ocorreu um erro ao executar o comando: {str(e)}",
            color=0xFF0000
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="music_channels", description="üéµ Gerencia o sistema de canais de m√∫sica autom√°ticos")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    canal="Canal para configurar (quando aplic√°vel)"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="Status", value="status"),
    discord.app_commands.Choice(name="Configurar Servidor", value="setup"),
    discord.app_commands.Choice(name="Adicionar Canal Trigger", value="add_trigger"),
    discord.app_commands.Choice(name="Remover Canal Trigger", value="remove_trigger"),
    discord.app_commands.Choice(name="Estat√≠sticas", value="stats"),
    discord.app_commands.Choice(name="Recarregar Config", value="reload")
])
async def music_channels(interaction: discord.Interaction, acao: str, canal: discord.VoiceChannel = None):
    """Comando para gerenciar canais de m√∫sica autom√°ticos"""
    try:
        # Verificar permiss√µes
        if not interaction.user.guild_permissions.manage_channels:
            embed = discord.Embed(
                title="‚ùå Acesso Negado",
                description="Voc√™ n√£o tem permiss√£o para gerenciar canais de m√∫sica.",
                color=0xFF0000
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        if acao == "status":
            config = bot.music_channels.config
            embed = discord.Embed(
                title="üéµ Status dos Canais de M√∫sica",
                description="Estado atual do sistema de canais de m√∫sica autom√°ticos",
                color=0x9932CC
            )
            embed.add_field(
                name="üîß Sistema",
                value="‚úÖ Ativo" if config.get('enabled', False) else "‚ùå Inativo",
                inline=True
            )
            embed.add_field(
                name="üéØ Canais Trigger",
                value=str(len(config.get('trigger_channels', []))),
                inline=True
            )
            embed.add_field(
                name="üéµ Canais Ativos",
                value=str(len(bot.music_channels.active_channels)),
                inline=True
            )
        
        elif acao == "setup":
            success = await bot.music_channels.setup_server(interaction.guild)
            if success:
                embed = discord.Embed(
                    title="‚úÖ Servidor Configurado",
                    description="Sistema de canais de m√∫sica configurado com sucesso!",
                    color=0x00FF00
                )
            else:
                embed = discord.Embed(
                    title="‚ùå Erro na Configura√ß√£o",
                    description="N√£o foi poss√≠vel configurar o servidor.",
                    color=0xFF0000
                )
        
        elif acao == "add_trigger":
            if not canal:
                embed = discord.Embed(
                    title="‚ùå Canal Necess√°rio",
                    description="Voc√™ precisa especificar um canal de voz.",
                    color=0xFF0000
                )
            else:
                success = await bot.music_channels.add_trigger_channel(canal.id)
                if success:
                    embed = discord.Embed(
                        title="‚úÖ Canal Adicionado",
                        description=f"Canal {canal.mention} adicionado como trigger de m√∫sica.",
                        color=0x00FF00
                    )
                else:
                    embed = discord.Embed(
                        title="‚ùå Erro",
                        description="N√£o foi poss√≠vel adicionar o canal.",
                        color=0xFF0000
                    )
        
        elif acao == "remove_trigger":
            if not canal:
                embed = discord.Embed(
                    title="‚ùå Canal Necess√°rio",
                    description="Voc√™ precisa especificar um canal de voz.",
                    color=0xFF0000
                )
            else:
                success = await bot.music_channels.remove_trigger_channel(canal.id)
                if success:
                    embed = discord.Embed(
                        title="‚úÖ Canal Removido",
                        description=f"Canal {canal.mention} removido dos triggers de m√∫sica.",
                        color=0x00FF00
                    )
                else:
                    embed = discord.Embed(
                        title="‚ùå Erro",
                        description="N√£o foi poss√≠vel remover o canal.",
                        color=0xFF0000
                    )
        
        elif acao == "stats":
            stats = bot.music_channels.get_stats()
            embed = discord.Embed(
                title="üìä Estat√≠sticas dos Canais de M√∫sica",
                description="Estat√≠sticas detalhadas do sistema",
                color=0x9932CC
            )
            embed.add_field(
                name="üéµ Canais Criados",
                value=f"Total: {stats['music_channels_total']}",
                inline=True
            )
            embed.add_field(
                name="üéØ Canais Trigger",
                value=f"Configurados: {stats['trigger_channels']}",
                inline=True
            )
            embed.add_field(
                name="üé∂ Canais Ativos",
                value=f"Atualmente: {stats['active_channels']}",
                inline=True
            )
        
        elif acao == "reload":
            bot.music_channels.config = bot.music_channels.load_config()
            embed = discord.Embed(
                title="üîÑ Configura√ß√£o Recarregada",
                description="As configura√ß√µes dos canais de m√∫sica foram recarregadas do arquivo.",
                color=0x00FF00
            )
        
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        logger.error(f"Erro no comando music_channels: {e}")
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Ocorreu um erro ao executar o comando: {str(e)}",
            color=0xFF0000
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

# ==================== COMANDOS DE MODERA√á√ÉO ====================

@bot.tree.command(name="warn", description="‚ö†Ô∏è Aplica advert√™ncia a um usu√°rio")
@discord.app_commands.describe(
    usuario="Usu√°rio a ser advertido",
    motivo="Motivo da advert√™ncia"
)
async def warn_user(interaction: discord.Interaction, usuario: discord.Member, motivo: str = "N√£o especificado"):
    """Comando para advertir usu√°rio"""
    if not interaction.user.guild_permissions.moderate_members:
        embed = discord.Embed(
            title="‚ùå Acesso Negado",
            description="Voc√™ n√£o tem permiss√£o para usar este comando.",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    result = await bot.moderation_system.warn_user(usuario, interaction.user, motivo)
    await interaction.followup.send(embed=result)

@bot.tree.command(name="warnings", description="üìã Mostra advert√™ncias de um usu√°rio")
@discord.app_commands.describe(usuario="Usu√°rio para verificar advert√™ncias")
async def show_warnings(interaction: discord.Interaction, usuario: discord.Member = None):
    """Comando para mostrar advert√™ncias"""
    if usuario is None:
        usuario = interaction.user
    
    if not interaction.user.guild_permissions.moderate_members and usuario != interaction.user:
        embed = discord.Embed(
            title="‚ùå Acesso Negado",
            description="Voc√™ s√≥ pode ver suas pr√≥prias advert√™ncias.",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    result = await bot.moderation_system.get_user_warnings(usuario)
    await interaction.followup.send(embed=result, ephemeral=True)

@bot.tree.command(name="clear_warnings", description="üßπ Remove advert√™ncias de um usu√°rio")
@discord.app_commands.describe(usuario="Usu√°rio para limpar advert√™ncias")
async def clear_warnings(interaction: discord.Interaction, usuario: discord.Member):
    """Comando para limpar advert√™ncias"""
    if not interaction.user.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Acesso Negado",
            description="Apenas administradores podem limpar advert√™ncias.",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    result = await bot.moderation_system.clear_user_warnings(usuario, interaction.user)
    await interaction.followup.send(embed=result)

@bot.tree.command(name="automod", description="üõ°Ô∏è Configura sistema de modera√ß√£o autom√°tica")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    valor="Valor da configura√ß√£o"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="Ativar/Desativar", value="toggle"),
    discord.app_commands.Choice(name="Limite de Spam", value="spam_limit"),
    discord.app_commands.Choice(name="Filtro de Toxicidade", value="toxicity_filter"),
    discord.app_commands.Choice(name="Prote√ß√£o Anti-Raid", value="raid_protection"),
    discord.app_commands.Choice(name="Status", value="status")
])
async def automod_config(interaction: discord.Interaction, acao: str, valor: str = None):
    """Comando para configurar automodera√ß√£o"""
    if not interaction.user.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Acesso Negado",
            description="Apenas administradores podem configurar a automodera√ß√£o.",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    result = await bot.moderation_system.configure_automod(interaction.guild.id, acao, valor)
    await interaction.followup.send(embed=result)

# ==================== COMANDOS MINI-GAMES ====================

@bot.tree.command(name="pedra_papel_tesoura", description="üéÆ Jogue pedra, papel, tesoura contra o bot")
@discord.app_commands.describe(escolha="Sua escolha: pedra, papel ou tesoura")
@discord.app_commands.choices(escolha=[
    discord.app_commands.Choice(name="ü™® Pedra", value="pedra"),
    discord.app_commands.Choice(name="üìÑ Papel", value="papel"),
    discord.app_commands.Choice(name="‚úÇÔ∏è Tesoura", value="tesoura")
])
async def rock_paper_scissors(interaction: discord.Interaction, escolha: str):
    """Comando para jogar pedra, papel, tesoura"""
    await interaction.response.defer()
    result = await bot.minigames_system.play_rock_paper_scissors(interaction, escolha)
    await interaction.followup.send(embed=result)

@bot.tree.command(name="quiz_pubg", description="üß† Teste seus conhecimentos sobre PUBG")
@discord.app_commands.describe(dificuldade="N√≠vel de dificuldade do quiz")
@discord.app_commands.choices(dificuldade=[
    discord.app_commands.Choice(name="üü¢ F√°cil", value="easy"),
    discord.app_commands.Choice(name="üü° M√©dio", value="medium"),
    discord.app_commands.Choice(name="üî¥ Dif√≠cil", value="hard"),
    discord.app_commands.Choice(name="üé≤ Aleat√≥rio", value="random")
])
async def pubg_quiz(interaction: discord.Interaction, dificuldade: str = "random"):
    """Comando para iniciar quiz PUBG"""
    difficulty = None if dificuldade == "random" else dificuldade
    
    await interaction.response.defer()
    result = await bot.minigames_system.play_quiz(interaction, difficulty)
    
    # Enviar pergunta e adicionar rea√ß√µes
    message = await interaction.followup.send(embed=result)
    
    # Adicionar rea√ß√µes para as op√ß√µes
    emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£']
    for emoji in emojis:
        await message.add_reaction(emoji)

@bot.tree.command(name="roleta", description="üé∞ Aposte seus pontos na roleta da sorte")
@discord.app_commands.describe(pontos="Quantidade de pontos para apostar")
async def roulette(interaction: discord.Interaction, pontos: int):
    """Comando para jogar na roleta"""
    await interaction.response.defer()
    result = await bot.minigames_system.play_roulette(interaction, pontos)
    await interaction.followup.send(embed=result)

@bot.tree.command(name="stats_jogos", description="üìä Veja suas estat√≠sticas nos mini-games")
@discord.app_commands.describe(usuario="Usu√°rio para ver estat√≠sticas (opcional)")
async def game_stats(interaction: discord.Interaction, usuario: discord.Member = None):
    """Comando para ver estat√≠sticas de jogos"""
    target_user = usuario or interaction.user
    
    await interaction.response.defer()
    result = await bot.minigames_system.get_player_stats(target_user)
    await interaction.followup.send(embed=result)

@bot.tree.command(name="desafio_diario", description="üèÜ Veja seu desafio di√°rio")
async def daily_challenge(interaction: discord.Interaction):
    """Comando para ver desafio di√°rio"""
    await interaction.response.defer()
    result = await bot.minigames_system.get_daily_challenge_status(interaction.user)
    await interaction.followup.send(embed=result)

@bot.tree.command(name="ranking_jogos", description="üèÜ Veja o ranking dos mini-games")
@discord.app_commands.describe(categoria="Categoria do ranking")
@discord.app_commands.choices(categoria=[
    discord.app_commands.Choice(name="üí∞ Pontos Totais", value="points"),
    discord.app_commands.Choice(name="üéÆ Jogos Jogados", value="games"),
    discord.app_commands.Choice(name="üèÜ Vit√≥rias", value="wins"),
    discord.app_commands.Choice(name="üß† Quiz Corretos", value="quiz")
])
async def games_leaderboard(interaction: discord.Interaction, categoria: str = "points"):
    """Comando para ver ranking dos jogos"""
    await interaction.response.defer()
    result = await bot.minigames_system.get_leaderboard(interaction.guild, categoria)
    await interaction.followup.send(embed=result)

# ==================== INICIALIZA√á√ÉO ====================

# ==================== COMANDOS DE GR√ÅFICOS ====================

@bot.tree.command(name="grafico_rank", description="üìà Mostra gr√°fico de progresso do seu rank")
async def grafico_rank(interaction: discord.Interaction):
    """Comando para gerar gr√°fico de progresso de rank"""
    try:
        await interaction.response.defer()
        
        # Gerar gr√°fico
        chart_file = await bot.charts_system.generate_rank_progress_chart(interaction.user)
        embed = await bot.charts_system.get_chart_embed('rank_progress', interaction.user)
        
        await interaction.followup.send(embed=embed, file=chart_file)
        
    except Exception as e:
        logger.error(f"Erro no comando grafico_rank: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar gr√°fico de rank. Tente novamente.", ephemeral=True)

@bot.tree.command(name="grafico_jogos", description="üéÆ Mostra gr√°fico de performance nos mini-games")
async def grafico_jogos(interaction: discord.Interaction):
    """Comando para gerar gr√°fico de performance em jogos"""
    try:
        await interaction.response.defer()
        
        # Gerar gr√°fico
        chart_file = await bot.charts_system.generate_games_performance_chart(interaction.user)
        embed = await bot.charts_system.get_chart_embed('games_performance', interaction.user)
        
        await interaction.followup.send(embed=embed, file=chart_file)
        
    except Exception as e:
        logger.error(f"Erro no comando grafico_jogos: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar gr√°fico de jogos. Tente novamente.", ephemeral=True)

@bot.tree.command(name="mapa_atividade", description="üî• Mostra mapa de calor da sua atividade")
async def mapa_atividade(interaction: discord.Interaction):
    """Comando para gerar heatmap de atividade"""
    try:
        await interaction.response.defer()
        
        # Gerar gr√°fico
        chart_file = await bot.charts_system.generate_activity_heatmap(interaction.user)
        embed = await bot.charts_system.get_chart_embed('activity_heatmap', interaction.user)
        
        await interaction.followup.send(embed=embed, file=chart_file)
        
    except Exception as e:
        logger.error(f"Erro no comando mapa_atividade: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar mapa de atividade. Tente novamente.", ephemeral=True)

@bot.tree.command(name="progresso_conquistas", description="üèÜ Mostra progresso das suas conquistas")
async def progresso_conquistas(interaction: discord.Interaction):
    """Comando para gerar gr√°fico de progresso de conquistas"""
    try:
        await interaction.response.defer()
        
        # Gerar gr√°fico
        chart_file = await bot.charts_system.generate_achievements_progress(interaction.user)
        embed = await bot.charts_system.get_chart_embed('achievements_progress', interaction.user)
        
        await interaction.followup.send(embed=embed, file=chart_file)
        
    except Exception as e:
        logger.error(f"Erro no comando progresso_conquistas: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar gr√°fico de conquistas. Tente novamente.", ephemeral=True)

@bot.tree.command(name="comparacao_radar", description="‚ö° Compara sua performance com a m√©dia do servidor")
async def comparacao_radar(interaction: discord.Interaction):
    """Comando para gerar gr√°fico radar de compara√ß√£o"""
    try:
        await interaction.response.defer()
        
        # Gerar gr√°fico
        chart_file = await bot.charts_system.generate_comparison_radar(interaction.user)
        embed = await bot.charts_system.get_chart_embed('comparison_radar', interaction.user)
        
        await interaction.followup.send(embed=embed, file=chart_file)
        
    except Exception as e:
        logger.error(f"Erro no comando comparacao_radar: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar gr√°fico de compara√ß√£o. Tente novamente.", ephemeral=True)

@bot.tree.command(name="relatorio_completo", description="üìã Gera relat√≥rio completo com todos os gr√°ficos")
async def relatorio_completo(interaction: discord.Interaction):
    """Comando para gerar relat√≥rio completo"""
    try:
        await interaction.response.defer()
        
        # Gerar todos os gr√°ficos
        chart_files = await bot.charts_system.generate_comprehensive_report(interaction.user)
        embed = await bot.charts_system.get_chart_embed('comprehensive', interaction.user)
        
        if chart_files:
            await interaction.followup.send(embed=embed, files=chart_files)
        else:
            await interaction.followup.send("‚ùå Erro ao gerar relat√≥rio completo. Tente novamente.", ephemeral=True)
        
    except Exception as e:
        logger.error(f"Erro no comando relatorio_completo: {e}")
        await interaction.followup.send("‚ùå Erro ao gerar relat√≥rio completo. Tente novamente.", ephemeral=True)

@bot.tree.command(name="graficos_help", description="‚ùì Ajuda sobre o sistema de gr√°ficos")
async def graficos_help(interaction: discord.Interaction):
    """Comando de ajuda para gr√°ficos"""
    embed = discord.Embed(
        title="üìä Sistema de Gr√°ficos - Ajuda",
        description="Visualize seu progresso com gr√°ficos interativos!",
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="üìà Comandos Dispon√≠veis",
        value="‚Ä¢ `/grafico_rank` - Progresso de rank\n"
              "‚Ä¢ `/grafico_jogos` - Performance em jogos\n"
              "‚Ä¢ `/mapa_atividade` - Mapa de atividade\n"
              "‚Ä¢ `/progresso_conquistas` - Progresso de conquistas\n"
              "‚Ä¢ `/comparacao_radar` - Compara√ß√£o com servidor\n"
              "‚Ä¢ `/relatorio_completo` - Relat√≥rio completo",
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è Informa√ß√µes",
        value="‚Ä¢ Gr√°ficos atualizados a cada 5 minutos\n"
              "‚Ä¢ Dados coletados de todos os sistemas\n"
              "‚Ä¢ Cache autom√°tico para melhor performance",
        inline=False
    )
    
    embed.set_footer(text="Hawk Bot - Sistema de Gr√°ficos")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# ==================== COMANDOS DE NOTIFICA√á√ïES ====================

@bot.tree.command(name="notificacoes", description="Ver suas notifica√ß√µes")
@app_commands.describe(
    apenas_nao_lidas="Mostrar apenas notifica√ß√µes n√£o lidas",
    limite="N√∫mero m√°ximo de notifica√ß√µes para mostrar (1-20)"
)
async def notificacoes_command(interaction: discord.Interaction, apenas_nao_lidas: bool = False, limite: int = 10):
    """Comando para ver notifica√ß√µes do usu√°rio"""
    try:
        if limite < 1 or limite > 20:
            limite = 10
        
        notifications = await bot.notifications_system.get_user_notifications(
            interaction.user.id, unread_only=apenas_nao_lidas, limit=limite
        )
        
        if not notifications:
            embed = discord.Embed(
                title="üì≠ Nenhuma Notifica√ß√£o",
                description="Voc√™ n√£o possui notifica√ß√µes" + (" n√£o lidas" if apenas_nao_lidas else "") + ".",
                color=0x95A5A6
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        embed = discord.Embed(
            title=f"üîî Suas Notifica√ß√µes ({len(notifications)})",
            color=0x3498DB
        )
        
        for i, notif in enumerate(notifications[:5], 1):  # Mostrar apenas 5 por p√°gina
            status_icon = "üìñ" if notif.is_read else "üîî"
            time_str = notif.created_at.strftime("%d/%m %H:%M")
            
            embed.add_field(
                name=f"{status_icon} {notif.title}",
                value=f"{notif.message[:100]}{'...' if len(notif.message) > 100 else ''}\n*{time_str}*",
                inline=False
            )
        
        if len(notifications) > 5:
            embed.set_footer(text=f"Mostrando 5 de {len(notifications)} notifica√ß√µes. Use /marcar_lidas para gerenciar.")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        logger.error(f"Erro no comando notifica√ß√µes: {e}")
        await interaction.response.send_message("‚ùå Erro ao buscar notifica√ß√µes.", ephemeral=True)

@bot.tree.command(name="marcar_lidas", description="Marcar todas as notifica√ß√µes como lidas")
async def marcar_lidas_command(interaction: discord.Interaction):
    """Comando para marcar todas as notifica√ß√µes como lidas"""
    try:
        count = await bot.notifications_system.mark_all_as_read(interaction.user.id)
        
        if count > 0:
            embed = discord.Embed(
                title="‚úÖ Notifica√ß√µes Marcadas",
                description=f"Marcadas {count} notifica√ß√µes como lidas.",
                color=0x27AE60
            )
        else:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Nenhuma A√ß√£o Necess√°ria",
                description="Voc√™ n√£o possui notifica√ß√µes n√£o lidas.",
                color=0x95A5A6
            )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        logger.error(f"Erro ao marcar notifica√ß√µes como lidas: {e}")
        await interaction.response.send_message("‚ùå Erro ao marcar notifica√ß√µes.", ephemeral=True)

@bot.tree.command(name="config_notificacoes", description="Configurar suas prefer√™ncias de notifica√ß√µes")
@app_commands.describe(
    dm_habilitado="Receber notifica√ß√µes por mensagem direta",
    canal_habilitado="Receber notifica√ß√µes no canal do servidor",
    horario_silencioso_inicio="Hora de in√≠cio do modo silencioso (0-23)",
    horario_silencioso_fim="Hora de fim do modo silencioso (0-23)",
    prioridade_minima="Prioridade m√≠nima das notifica√ß√µes (low/medium/high/urgent)"
)
async def config_notificacoes_command(
    interaction: discord.Interaction,
    dm_habilitado: bool = None,
    canal_habilitado: bool = None,
    horario_silencioso_inicio: int = None,
    horario_silencioso_fim: int = None,
    prioridade_minima: str = None
):
    """Comando para configurar prefer√™ncias de notifica√ß√µes"""
    try:
        updates = {}
        
        if dm_habilitado is not None:
            updates['dm_enabled'] = dm_habilitado
        
        if canal_habilitado is not None:
            updates['channel_enabled'] = canal_habilitado
        
        if horario_silencioso_inicio is not None:
            if 0 <= horario_silencioso_inicio <= 23:
                updates['quiet_hours_start'] = horario_silencioso_inicio
        
        if horario_silencioso_fim is not None:
            if 0 <= horario_silencioso_fim <= 23:
                updates['quiet_hours_end'] = horario_silencioso_fim
        
        if prioridade_minima:
            valid_priorities = ['low', 'medium', 'high', 'urgent']
            if prioridade_minima.lower() in valid_priorities:
                from notifications_system import NotificationPriority
                updates['min_priority'] = NotificationPriority(prioridade_minima.lower())
        
        if not updates:
            # Mostrar configura√ß√µes atuais
            prefs = bot.notifications_system.get_user_preferences(interaction.user.id)
            
            embed = discord.Embed(
                title="‚öôÔ∏è Suas Configura√ß√µes de Notifica√ß√µes",
                color=0x3498DB
            )
            
            embed.add_field(
                name="üì± Mensagens Diretas",
                value="‚úÖ Habilitado" if prefs.dm_enabled else "‚ùå Desabilitado",
                inline=True
            )
            
            embed.add_field(
                name="üí¨ Canal do Servidor",
                value="‚úÖ Habilitado" if prefs.channel_enabled else "‚ùå Desabilitado",
                inline=True
            )
            
            embed.add_field(
                name="üåô Hor√°rio Silencioso",
                value=f"{prefs.quiet_hours_start:02d}:00 - {prefs.quiet_hours_end:02d}:00",
                inline=True
            )
            
            embed.add_field(
                name="‚ö° Prioridade M√≠nima",
                value=prefs.min_priority.value.title(),
                inline=True
            )
            
            embed.add_field(
                name="üìä Tipos Habilitados",
                value=f"{len(prefs.enabled_types)} de {len(bot.notifications_system.templates)} tipos",
                inline=True
            )
            
            embed.set_footer(text="Use os par√¢metros do comando para alterar as configura√ß√µes")
            
        else:
            # Aplicar atualiza√ß√µes
            success = await bot.notifications_system.update_user_preferences(interaction.user.id, **updates)
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ Configura√ß√µes Atualizadas",
                    description="Suas prefer√™ncias de notifica√ß√µes foram atualizadas com sucesso!",
                    color=0x27AE60
                )
                
                for key, value in updates.items():
                    embed.add_field(
                        name=key.replace('_', ' ').title(),
                        value=str(value),
                        inline=True
                    )
            else:
                embed = discord.Embed(
                    title="‚ùå Erro na Atualiza√ß√£o",
                    description="N√£o foi poss√≠vel atualizar suas prefer√™ncias.",
                    color=0xE74C3C
                )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        logger.error(f"Erro na configura√ß√£o de notifica√ß√µes: {e}")
        await interaction.response.send_message("‚ùå Erro ao configurar notifica√ß√µes.", ephemeral=True)

@bot.tree.command(name="lembrete", description="Criar um lembrete personalizado")
@app_commands.describe(
    titulo="T√≠tulo do lembrete",
    mensagem="Mensagem do lembrete",
    tempo="Tempo para o lembrete (ex: 30m, 2h, 1d)",
    prioridade="Prioridade do lembrete (low/medium/high)"
)
async def lembrete_command(
    interaction: discord.Interaction,
    titulo: str,
    mensagem: str,
    tempo: str,
    prioridade: str = "medium"
):
    """Comando para criar lembretes personalizados"""
    try:
        # Parsear tempo
        import re
        time_match = re.match(r'(\d+)([mhd])', tempo.lower())
        if not time_match:
            await interaction.response.send_message(
                "‚ùå Formato de tempo inv√°lido. Use: 30m (minutos), 2h (horas), 1d (dias)",
                ephemeral=True
            )
            return
        
        amount = int(time_match.group(1))
        unit = time_match.group(2)
        
        if unit == 'm':
            delta = timedelta(minutes=amount)
        elif unit == 'h':
            delta = timedelta(hours=amount)
        elif unit == 'd':
            delta = timedelta(days=amount)
        
        scheduled_for = datetime.now() + delta
        
        # Validar prioridade
        valid_priorities = ['low', 'medium', 'high']
        if prioridade.lower() not in valid_priorities:
            prioridade = 'medium'
        
        from notifications_system import NotificationPriority
        priority_obj = NotificationPriority(prioridade.lower())
        
        # Criar lembrete
        reminder = await bot.notifications_system.create_custom_reminder(
            interaction.user.id, titulo, mensagem, scheduled_for, priority_obj
        )
        
        if reminder:
            embed = discord.Embed(
                title="‚è∞ Lembrete Criado",
                description=f"Seu lembrete foi agendado para {scheduled_for.strftime('%d/%m/%Y √†s %H:%M')}.",
                color=0x27AE60
            )
            
            embed.add_field(name="üìù T√≠tulo", value=titulo, inline=False)
            embed.add_field(name="üí¨ Mensagem", value=mensagem, inline=False)
            embed.add_field(name="‚ö° Prioridade", value=prioridade.title(), inline=True)
            
        else:
            embed = discord.Embed(
                title="‚ùå Erro ao Criar Lembrete",
                description="N√£o foi poss√≠vel criar o lembrete.",
                color=0xE74C3C
            )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        logger.error(f"Erro ao criar lembrete: {e}")
        await interaction.response.send_message("‚ùå Erro ao criar lembrete.", ephemeral=True)

@bot.tree.command(name="notificacoes_help", description="Ajuda sobre o sistema de notifica√ß√µes")
async def notificacoes_help_command(interaction: discord.Interaction):
    """Comando de ajuda para notifica√ß√µes"""
    embed = discord.Embed(
        title="üîî Sistema de Notifica√ß√µes - Ajuda",
        description="Sistema completo de notifica√ß√µes push personalizadas do Hawk Bot.",
        color=0x3498DB
    )
    
    embed.add_field(
        name="üìã Comandos Dispon√≠veis",
        value="‚Ä¢ `/notificacoes` - Ver suas notifica√ß√µes\n"
              "‚Ä¢ `/marcar_lidas` - Marcar todas como lidas\n"
              "‚Ä¢ `/config_notificacoes` - Configurar prefer√™ncias\n"
              "‚Ä¢ `/lembrete` - Criar lembrete personalizado",
        inline=False
    )
    
    embed.add_field(
        name="üîî Tipos de Notifica√ß√µes",
        value="‚Ä¢ **Rank**: Promo√ß√µes e mudan√ßas de rank\n"
              "‚Ä¢ **Conquistas**: Novas conquistas desbloqueadas\n"
              "‚Ä¢ **Torneios**: In√≠cio e resultados de torneios\n"
              "‚Ä¢ **Desafios**: Novos desafios di√°rios\n"
              "‚Ä¢ **Mini-games**: Marcos e conquistas\n"
              "‚Ä¢ **Sistema**: An√∫ncios importantes\n"
              "‚Ä¢ **Lembretes**: Lembretes personalizados",
        inline=False
    )
    
    embed.add_field(
        name="‚öôÔ∏è Configura√ß√µes",
        value="‚Ä¢ **DM/Canal**: Escolha onde receber\n"
              "‚Ä¢ **Hor√°rio Silencioso**: Defina quando n√£o receber\n"
              "‚Ä¢ **Prioridade**: Filtre por import√¢ncia\n"
              "‚Ä¢ **Tipos**: Ative/desative categorias",
        inline=False
    )
    
    embed.add_field(
        name="üéØ Prioridades",
        value="‚Ä¢ **Low**: Informa√ß√µes gerais\n"
              "‚Ä¢ **Medium**: Eventos importantes\n"
              "‚Ä¢ **High**: Conquistas e promo√ß√µes\n"
              "‚Ä¢ **Urgent**: Alertas cr√≠ticos",
        inline=False
    )
    
    embed.set_footer(text="Hawk Bot - Sistema de Notifica√ß√µes Push")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="templates_demo", description="Demonstra os templates visuais personalizados dispon√≠veis")
@app_commands.describe(template_type="Tipo de template para demonstrar")
@app_commands.choices(template_type=[
    app_commands.Choice(name="Sucesso", value="success"),
    app_commands.Choice(name="Erro", value="error"),
    app_commands.Choice(name="Aviso", value="warning"),
    app_commands.Choice(name="Informa√ß√£o", value="info"),
    app_commands.Choice(name="PUBG Rank", value="pubg_rank"),
    app_commands.Choice(name="Servidor Rank", value="server_rank"),
    app_commands.Choice(name="Torneio", value="tournament"),
    app_commands.Choice(name="Conquista", value="achievement"),
    app_commands.Choice(name="M√∫sica", value="music"),
    app_commands.Choice(name="Boas-vindas", value="welcome"),
    app_commands.Choice(name="Leaderboard", value="leaderboard")
])
async def templates_demo(interaction: discord.Interaction, template_type: str = "info"):
    """Demonstra os diferentes templates visuais dispon√≠veis"""
    try:
        user = interaction.user
        
        # Dados de exemplo para diferentes templates
        sample_data = {
            'success': {
                'title': 'Opera√ß√£o Realizada com Sucesso',
                'description': 'Sua solicita√ß√£o foi processada com sucesso!'
            },
            'error': {
                'title': 'Erro na Opera√ß√£o',
                'description': 'Ocorreu um erro durante o processamento.'
            },
            'warning': {
                'title': 'Aten√ß√£o Necess√°ria',
                'description': 'Esta a√ß√£o requer sua aten√ß√£o.'
            },
            'info': {
                'title': 'Informa√ß√£o Importante',
                'description': 'Aqui est√£o as informa√ß√µes solicitadas.'
            },
            'pubg_rank': {
                'ranked_rank': 'Diamante III',
                'ranked_points': '4250',
                'mm_rank': 'Mestre V',
                'mm_points': '3890',
                'kd': '2.45',
                'wins': '127',
                'winrate': '68'
            },
            'server_rank': {
                'position': '15',
                'points': '2450',
                'level': '12',
                'recent_activities': [
                    'üéÆ Participou de torneio',
                    'üí¨ Ativo no chat',
                    'üèÜ Conquistou badge'
                ]
            },
            'tournament': {
                'name': 'Torneio Hawk Esports',
                'description': 'Campeonato semanal de PUBG',
                'status': 'active',
                'participants': 32,
                'prize': 'R$ 500,00'
            },
            'achievement': {
                'name': 'Mestre dos Headshots',
                'description': 'Conseguiu 100 headshots em partidas ranqueadas',
                'rarity': 'epic'
            },
            'music': {
                'title': 'Imagine Dragons - Believer',
                'artist': 'Imagine Dragons',
                'duration': '3:24'
            },
            'welcome': {
                'member_count': 156
            },
            'leaderboard': [
                {'name': 'PlayerOne', 'rank': 'Predador', 'kd': '3.2', 'points': '5000', 'level': '15'},
                {'name': 'GamerPro', 'rank': 'Mestre I', 'kd': '2.8', 'points': '4500', 'level': '14'},
                {'name': 'SkillMaster', 'rank': 'Diamante V', 'kd': '2.5', 'points': '4200', 'level': '13'}
            ]
        }
        
        # Criar embed baseado no template selecionado
        if template_type in ['success', 'error', 'warning', 'info']:
            data = sample_data[template_type]
            embed = bot.embed_templates.create_embed(template_type, data['title'], data['description'])
            
        elif template_type == 'pubg_rank':
            embed = bot.embed_templates.create_pubg_rank_embed(user, sample_data['pubg_rank'])
            
        elif template_type == 'server_rank':
            embed = bot.embed_templates.create_server_rank_embed(user, sample_data['server_rank'])
            
        elif template_type == 'tournament':
            embed = bot.embed_templates.create_tournament_embed(sample_data['tournament'])
            
        elif template_type == 'achievement':
            embed = bot.embed_templates.create_achievement_embed(user, sample_data['achievement'])
            
        elif template_type == 'music':
            embed = bot.embed_templates.create_music_embed('playing', sample_data['music'])
            
        elif template_type == 'welcome':
            embed = bot.embed_templates.create_welcome_embed(user, sample_data['welcome'])
            
        elif template_type == 'leaderboard':
            embed = bot.embed_templates.create_leaderboard_embed('pubg', sample_data['leaderboard'])
        
        # Adicionar informa√ß√µes sobre o template
        template_info = bot.embed_templates.get_template_info(template_type)
        embed.add_field(
            name="üé® Informa√ß√µes do Template",
            value=f"**Tipo:** {template_type}\n**Cor:** #{template_info.get('color', 0):06x}\n**Emoji:** {template_info.get('emoji', '‚ùì')}",
            inline=True
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        logger.error(f"Erro na demonstra√ß√£o de templates: {e}")
        error_embed = bot.embed_templates.create_error_embed(
            "Erro na Demonstra√ß√£o",
            f"N√£o foi poss√≠vel demonstrar o template: {str(e)}"
        )
        await interaction.response.send_message(embed=error_embed, ephemeral=True)

@bot.tree.command(name="test_pubg_api", description="üîß [ADMIN] Testa conex√£o com API do PUBG")
async def test_pubg_api(interaction: discord.Interaction, jogador: str = None):
    """Comando para testar a API do PUBG"""
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå Voc√™ precisa ser administrador para usar este comando!", 
            ephemeral=True
        )
        return
    
    await interaction.response.defer()
    
    try:
        # Se n√£o especificar jogador, usar dados do usu√°rio
        if not jogador:
            player_data = bot.storage.get_player(str(interaction.user.id))
            if not player_data:
                await interaction.followup.send(
                    "‚ùå Voc√™ n√£o est√° registrado! Use `/register_pubg` primeiro ou especifique um nome de jogador.",
                    ephemeral=True
                )
                return
            jogador = player_data['pubg_name']
            shard = player_data.get('shard', 'steam')
        else:
            shard = 'steam'  # Padr√£o
        
        embed = discord.Embed(
            title="üîß Teste da API PUBG",
            description=f"Testando conex√£o para jogador: **{jogador}**",
            color=discord.Color.blue()
        )
        
        # Testar busca do jogador
        embed.add_field(
            name="1Ô∏è‚É£ Buscando jogador...",
            value="‚è≥ Processando...",
            inline=False
        )
        
        await interaction.followup.send(embed=embed)
        
        # Buscar stats
        stats = await bot.pubg_api.get_player_stats(jogador, shard)
        
        if stats:
            # Sucesso - mostrar informa√ß√µes
            success_embed = discord.Embed(
                title="‚úÖ API PUBG Funcionando!",
                description=f"Dados obtidos com sucesso para **{jogador}**",
                color=discord.Color.green()
            )
            
            # Informa√ß√µes do jogador
            player_info = stats.get('player_info', {})
            success_embed.add_field(
                name="üë§ Informa√ß√µes do Jogador",
                value=f"**Nome:** {player_info.get('name', 'N/A')}\n**Shard:** {player_info.get('shard', 'N/A')}\n**ID:** {player_info.get('id', 'N/A')[:20]}...",
                inline=False
            )
            
            # Stats de temporada
            season_stats = stats.get('season_stats', {})
            ranked_squad = season_stats.get('ranked', {}).get('squad', {})
            
            if ranked_squad:
                success_embed.add_field(
                    name="üìä Stats Ranked Squad",
                    value=f"**K/D:** {ranked_squad.get('kd', 0)}\n**Partidas:** {ranked_squad.get('matches', 0)}\n**Vit√≥rias:** {ranked_squad.get('wins', 0)}\n**Dano M√©dio:** {ranked_squad.get('damage_avg', 0)}",
                    inline=True
                )
            
            # Calcular rank
            rank = bot.pubg_api.calculate_rank(season_stats, 'ranked')
            success_embed.add_field(
                name="üèÜ Rank Calculado",
                value=f"**Ranked:** {rank}",
                inline=True
            )
            
            success_embed.add_field(
                name="‚è∞ √öltima Atualiza√ß√£o",
                value=stats.get('last_updated', 'N/A'),
                inline=False
            )
            
            await interaction.edit_original_response(embed=success_embed)
            
        else:
            # Erro - mostrar diagn√≥stico
            error_embed = discord.Embed(
                title="‚ùå Erro na API PUBG",
                description=f"N√£o foi poss√≠vel obter dados para **{jogador}**",
                color=discord.Color.red()
            )
            
            # Verificar poss√≠veis causas
            error_embed.add_field(
                name="üîç Poss√≠veis Causas",
                value="‚Ä¢ Nome do jogador incorreto\n‚Ä¢ Jogador n√£o existe no shard especificado\n‚Ä¢ API PUBG indispon√≠vel\n‚Ä¢ Chave da API inv√°lida\n‚Ä¢ Limite de requisi√ß√µes excedido",
                inline=False
            )
            
            error_embed.add_field(
                name="üí° Solu√ß√µes",
                value="‚Ä¢ Verifique se o nome est√° correto\n‚Ä¢ Tente com outro shard (steam, psn, xbox)\n‚Ä¢ Aguarde alguns minutos e tente novamente",
                inline=False
            )
            
            await interaction.edit_original_response(embed=error_embed)
            
    except Exception as e:
        logger.error(f"Erro no teste da API PUBG: {e}")
        error_embed = discord.Embed(
            title="üí• Erro Interno",
            description=f"Erro durante o teste: {str(e)}",
            color=discord.Color.red()
        )
        await interaction.edit_original_response(embed=error_embed)

@bot.tree.command(name="debug_pubg_raw", description="üîç [ADMIN] Debug completo da API PUBG - dados brutos")
async def debug_pubg_raw(interaction: discord.Interaction, jogador: str = None):
    """Comando para debug completo da API PUBG"""
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå Voc√™ precisa ser administrador para usar este comando!", 
            ephemeral=True
        )
        return
    
    await interaction.response.defer()
    
    try:
        # Se n√£o especificar jogador, usar dados do usu√°rio
        if not jogador:
            player_data = bot.storage.get_player(str(interaction.user.id))
            if not player_data:
                await interaction.followup.send(
                    "‚ùå Voc√™ n√£o est√° registrado! Use `/register_pubg` primeiro ou especifique um nome de jogador.",
                    ephemeral=True
                )
                return
            jogador = player_data['pubg_name']
            shard = player_data.get('shard', 'steam')
        else:
            shard = 'steam'  # Padr√£o
        
        embed = discord.Embed(
            title="üîç Debug Completo PUBG API",
            description=f"Analisando dados brutos para: **{jogador}**",
            color=discord.Color.orange()
        )
        
        await interaction.followup.send(embed=embed)
        
        # 1. Testar busca do jogador
        try:
            player_info = await bot.pubg_api._get_player_by_name(jogador, shard)
            if player_info:
                embed.add_field(
                    name="‚úÖ 1. Jogador Encontrado",
                    value=f"**ID:** {player_info['id'][:20]}...\n**Nome:** {player_info['name']}\n**Shard:** {shard}",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ùå 1. Jogador N√ÉO Encontrado",
                    value="Jogador n√£o existe no shard especificado",
                    inline=False
                )
                await interaction.edit_original_response(embed=embed)
                return
        except Exception as e:
            embed.add_field(
                name="üí• 1. Erro na Busca do Jogador",
                value=f"Erro: {str(e)}",
                inline=False
            )
            await interaction.edit_original_response(embed=embed)
            return
        
        # 2. Testar temporada atual
        try:
            current_season = await bot.pubg_api._get_current_season(shard)
            if current_season:
                season_id = current_season['id']
                season_name = current_season['attributes'].get('id', 'N/A')
                is_current = current_season['attributes'].get('isCurrentSeason', False)
                embed.add_field(
                    name="‚úÖ 2. Temporada Atual",
                    value=f"**ID:** {season_id}\n**Nome:** {season_name}\n**Atual:** {is_current}",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ùå 2. Temporada N√ÉO Encontrada",
                    value="N√£o foi poss√≠vel obter temporada atual",
                    inline=False
                )
        except Exception as e:
            embed.add_field(
                name="üí• 2. Erro na Temporada",
                value=f"Erro: {str(e)}",
                inline=False
            )
        
        # 3. Testar stats da temporada
        try:
            season_stats = await bot.pubg_api._get_season_stats(player_info['id'], current_season['id'], shard)
            if season_stats:
                # Verificar estrutura dos dados
                game_mode_stats = season_stats['data']['attributes']['gameModeStats']
                available_modes = list(game_mode_stats.keys())
                
                embed.add_field(
                    name="‚úÖ 3. Stats da Temporada",
                    value=f"**Modos Dispon√≠veis:** {', '.join(available_modes)}\n**Total de Modos:** {len(available_modes)}",
                    inline=False
                )
                
                # Verificar dados espec√≠ficos do squad (ranked)
                squad_data = game_mode_stats.get('squad', {})
                if squad_data:
                    matches = squad_data.get('roundsPlayed', 0)
                    kills = squad_data.get('kills', 0)
                    wins = squad_data.get('wins', 0)
                    embed.add_field(
                        name="üìä Squad Stats (Ranked)",
                        value=f"**Partidas:** {matches}\n**Kills:** {kills}\n**Vit√≥rias:** {wins}",
                        inline=True
                    )
                else:
                    embed.add_field(
                        name="‚ö†Ô∏è Squad Stats",
                        value="Nenhum dado de squad encontrado",
                        inline=True
                    )
                
                # Verificar outros modos
                duo_data = game_mode_stats.get('duo', {})
                solo_data = game_mode_stats.get('solo', {})
                
                if duo_data:
                    embed.add_field(
                        name="üìä Duo Stats",
                        value=f"**Partidas:** {duo_data.get('roundsPlayed', 0)}",
                        inline=True
                    )
                
                if solo_data:
                    embed.add_field(
                        name="üìä Solo Stats",
                        value=f"**Partidas:** {solo_data.get('roundsPlayed', 0)}",
                        inline=True
                    )
                
            else:
                embed.add_field(
                    name="‚ùå 3. Stats N√ÉO Encontradas",
                    value="Nenhuma estat√≠stica encontrada para esta temporada",
                    inline=False
                )
        except Exception as e:
            embed.add_field(
                name="üí• 3. Erro nas Stats",
                value=f"Erro: {str(e)}",
                inline=False
            )
        
        # 4. Testar processamento
        try:
            final_stats = await bot.pubg_api.get_player_stats(jogador, shard)
            if final_stats:
                processed_ranked = final_stats.get('season_stats', {}).get('ranked', {})
                squad_processed = processed_ranked.get('squad', {})
                
                embed.add_field(
                    name="‚úÖ 4. Processamento Final",
                    value=f"**K/D Squad:** {squad_processed.get('kd', 0)}\n**Partidas Squad:** {squad_processed.get('matches', 0)}\n**Rank Calculado:** {bot.pubg_api.calculate_rank(final_stats.get('season_stats', {}), 'ranked')}",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ùå 4. Processamento Falhou",
                    value="Falha no processamento final dos dados",
                    inline=False
                )
        except Exception as e:
            embed.add_field(
                name="üí• 4. Erro no Processamento",
                value=f"Erro: {str(e)}",
                inline=False
            )
        
        await interaction.edit_original_response(embed=embed)
        
    except Exception as e:
        logger.error(f"Erro no debug da API PUBG: {e}")
        error_embed = discord.Embed(
            title="üí• Erro no Debug",
            description=f"Erro durante o debug: {str(e)}",
            color=discord.Color.red()
        )
        await interaction.edit_original_response(embed=error_embed)

@bot.tree.command(name="admin_update_roles", description="üîÑ [ADMIN] Atualiza cargo 'Acesso liberado' para todos os membros registrados")
async def admin_update_roles(interaction: discord.Interaction):
    """Comando administrativo para atualizar cargos de acesso para membros j√° registrados"""
    # Verificar permiss√µes de administrador
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå Voc√™ precisa ser administrador para usar este comando!", 
            ephemeral=True
        )
        return
    
    await interaction.response.defer()
    
    try:
        # Executar atualiza√ß√£o
        result = await bot.registration.update_all_access_roles(interaction.guild)
        
        # Criar embed de resposta
        if result['updated'] > 0 or result['already_had'] > 0:
            embed = discord.Embed(
                title="‚úÖ Atualiza√ß√£o de Cargos Conclu√≠da!",
                description="Processo de atualiza√ß√£o do cargo 'Acesso liberado' finalizado.",
                color=discord.Color.green()
            )
        else:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Nenhuma Atualiza√ß√£o Necess√°ria",
                description="N√£o foram encontrados membros registrados para atualizar.",
                color=discord.Color.blue()
            )
            
        embed.add_field(
            name="üìä Resultados",
            value=(
                f"üÜï **Atualizados:** {result['updated']}\n"
                f"‚úÖ **J√° tinham:** {result['already_had']}\n"
                f"‚ùì **N√£o encontrados:** {result['not_found']}\n"
                f"üìã **Total registrados:** {result['total_registered']}"
            ),
            inline=False
        )
        
        if result['updated'] > 0:
            embed.add_field(
                name="üí° Dica",
                value="Os membros atualizados agora t√™m acesso completo ao servidor!",
                inline=False
            )
    
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Erro no comando admin_update_roles: {e}")
        error_embed = discord.Embed(
            title="‚ùå Erro na Atualiza√ß√£o",
            description=f"Ocorreu um erro durante a atualiza√ß√£o: {str(e)}",
            color=discord.Color.red()
        )
        await interaction.followup.send(embed=error_embed, ephemeral=True)

@bot.tree.command(name="update_access_roles", description="üîÑ Atualiza cargo 'Acesso liberado' para todos os membros registrados (Admin)")
async def update_access_roles(interaction: discord.Interaction):
    """Comando para atualizar cargos de acesso para membros j√° registrados"""
    # Verificar permiss√µes de administrador
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå Voc√™ precisa ser administrador para usar este comando!", 
            ephemeral=True
        )
        return
    
    await interaction.response.defer()
    
    try:
        # Executar atualiza√ß√£o
        result = await bot.registration.update_all_access_roles(interaction.guild)
        
        if "error" in result:
            embed = discord.Embed(
                title="‚ùå Erro na Atualiza√ß√£o",
                description=f"Erro: {result['error']}",
                color=discord.Color.red()
            )
        else:
            embed = discord.Embed(
                title="‚úÖ Atualiza√ß√£o de Cargos Conclu√≠da",
                description="Cargos 'Acesso liberado' atualizados para membros registrados!",
                color=discord.Color.green()
            )
            
            embed.add_field(
                name="üìä Resultados",
                value=(
                    f"üÜï **Atualizados:** {result['updated']}\n"
                    f"‚úÖ **J√° tinham:** {result['already_had']}\n"
                    f"‚ùì **N√£o encontrados:** {result['not_found']}\n"
                    f"üìã **Total registrados:** {result['total_registered']}"
                ),
                inline=False
            )
            
            if result['updated'] > 0:
                embed.add_field(
                    name="üí° Dica",
                    value="Os membros atualizados agora t√™m acesso completo ao servidor!",
                    inline=False
                )
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Erro no comando update_access_roles: {e}")
        await interaction.followup.send(
            f"‚ùå Erro ao atualizar cargos: {str(e)}", 
            ephemeral=True
        )

@bot.tree.command(name="tempo_real", description="‚ö° [ADMIN] Configura atualiza√ß√µes em tempo real")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    valor="Valor da configura√ß√£o (quando aplic√°vel)"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="Ativar", value="enable"),
    discord.app_commands.Choice(name="Desativar", value="disable"),
    discord.app_commands.Choice(name="Status", value="status"),
    discord.app_commands.Choice(name="Intervalo Ranks (min)", value="rank_interval"),
    discord.app_commands.Choice(name="Intervalo Stats (min)", value="stats_interval")
])
async def tempo_real_config(interaction: discord.Interaction, acao: str, valor: int = None):
    """Configura sistema de atualiza√ß√µes em tempo real"""
    try:
        # Verificar permiss√µes de administrador
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Voc√™ precisa ser administrador para usar este comando.", ephemeral=True)
            return
        
        # Carregar configura√ß√£o atual
        config = bot.dual_ranking_system.config
        real_time_config = config.get('real_time_updates', {})
        
        if acao == "enable":
            real_time_config['enabled'] = True
            bot.dual_ranking_system.save_config()
            
            embed = discord.Embed(
                title="‚ö° Tempo Real Ativado",
                description="Sistema de atualiza√ß√µes em tempo real foi **ativado**!",
                color=0x00ff00
            )
            embed.add_field(
                name="üìä Configura√ß√µes Atuais",
                value=f"‚Ä¢ Ranks: A cada {real_time_config.get('rank_update_interval_minutes', 30)} minutos\n"
                      f"‚Ä¢ Stats: A cada {real_time_config.get('stats_update_interval_minutes', 15)} minutos\n"
                      f"‚Ä¢ Auto-sync: {'‚úÖ' if real_time_config.get('auto_sync_on_activity', True) else '‚ùå'}",
                inline=False
            )
            
        elif acao == "disable":
            real_time_config['enabled'] = False
            bot.dual_ranking_system.save_config()
            
            embed = discord.Embed(
                title="‚è∏Ô∏è Tempo Real Desativado",
                description="Sistema de atualiza√ß√µes em tempo real foi **desativado**.",
                color=0xff9900
            )
            embed.add_field(
                name="‚ÑπÔ∏è Informa√ß√£o",
                value="As atualiza√ß√µes voltar√£o ao modo padr√£o (6 horas).",
                inline=False
            )
            
        elif acao == "status":
            status = "üü¢ Ativo" if real_time_config.get('enabled', False) else "üî¥ Inativo"
            
            embed = discord.Embed(
                title="‚ö° Status do Tempo Real",
                description=f"Sistema: {status}",
                color=0x00ff00 if real_time_config.get('enabled', False) else 0xff0000
            )
            embed.add_field(
                name="‚öôÔ∏è Configura√ß√µes",
                value=f"‚Ä¢ Intervalo Ranks: {real_time_config.get('rank_update_interval_minutes', 30)} min\n"
                      f"‚Ä¢ Intervalo Stats: {real_time_config.get('stats_update_interval_minutes', 15)} min\n"
                      f"‚Ä¢ Auto-sync: {'‚úÖ' if real_time_config.get('auto_sync_on_activity', True) else '‚ùå'}\n"
                      f"‚Ä¢ Max API calls/hora: {real_time_config.get('max_api_calls_per_hour', 120)}",
                inline=False
            )
            
        elif acao == "rank_interval":
            if valor is None or valor < 5 or valor > 120:
                await interaction.response.send_message("‚ùå Valor inv√°lido! Use entre 5 e 120 minutos.", ephemeral=True)
                return
                
            real_time_config['rank_update_interval_minutes'] = valor
            bot.dual_ranking_system.save_config()
            
            embed = discord.Embed(
                title="‚ö° Intervalo de Ranks Atualizado",
                description=f"Intervalo de atualiza√ß√£o de ranks alterado para **{valor} minutos**.",
                color=0x00ff00
            )
            
        elif acao == "stats_interval":
            if valor is None or valor < 5 or valor > 60:
                await interaction.response.send_message("‚ùå Valor inv√°lido! Use entre 5 e 60 minutos.", ephemeral=True)
                return
                
            real_time_config['stats_update_interval_minutes'] = valor
            bot.dual_ranking_system.save_config()
            
            embed = discord.Embed(
                title="‚ö° Intervalo de Stats Atualizado",
                description=f"Intervalo de atualiza√ß√£o de estat√≠sticas alterado para **{valor} minutos**.",
                color=0x00ff00
            )
        
        embed.set_footer(text="Hawk Esports ‚Ä¢ Sistema de Tempo Real")
        await interaction.response.send_message(embed=embed)
        
    except Exception as e:
        logger.error(f"Erro no comando tempo_real: {e}")
        await interaction.response.send_message(f"‚ùå Erro ao configurar tempo real: {e}", ephemeral=True)

@bot.tree.command(name="force_rank_update", description="üîÑ [ADMIN] For√ßa atualiza√ß√£o de rank de um jogador")
@discord.app_commands.describe(player="Usu√°rio Discord para atualizar (opcional, atualiza voc√™ se n√£o especificado)")
async def force_rank_update(interaction: discord.Interaction, player: discord.Member = None):
    """For√ßa atualiza√ß√£o de rank de um jogador espec√≠fico"""
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå Voc√™ precisa ser administrador para usar este comando!", 
            ephemeral=True
        )
        return
    
    await interaction.response.defer()
    
    try:
        # Determinar jogador alvo
        target_user = player if player else interaction.user
        user_data = bot.storage.get_player(str(target_user.id))
        
        if not user_data:
            await interaction.followup.send(f"‚ùå {target_user.mention} n√£o est√° registrado no sistema.")
            return
        
        embed = discord.Embed(
            title="üîÑ For√ßando Atualiza√ß√£o de Rank",
            description=f"Atualizando dados de **{user_data['pubg_name']}** ({target_user.mention})",
            color=0xFF6B35,
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìä Status",
            value="üîÑ Buscando dados da API PUBG...",
            inline=False
        )
        
        await interaction.followup.send(embed=embed)
        
        # For√ßar atualiza√ß√£o do rank
        result = await bot.rank_system.update_player_rank(str(target_user.id), str(interaction.guild.id))
        
        if result['success']:
            # Buscar dados atualizados
            updated_data = bot.storage.get_player(str(target_user.id))
            
            embed.set_field_at(
                0,
                name="üìä Status",
                value="‚úÖ **Atualiza√ß√£o conclu√≠da com sucesso!**",
                inline=False
            )
            
            # Mostrar ranks atuais
            current_ranks = updated_data.get('current_ranks', {})
            ranked_rank = current_ranks.get('ranked', 'Sem rank')
            mm_rank = current_ranks.get('mm', 'Sem rank MM')
            
            embed.add_field(
                name="üèÜ Ranks Atuais",
                value=f"**Ranqueado:** {ranked_rank}\n**MM:** {mm_rank}",
                inline=False
            )
            
            # Mostrar estat√≠sticas
            season_stats = updated_data.get('season_stats', {})
            ranked_squad = season_stats.get('ranked', {}).get('squad', {})
            mm_squad = season_stats.get('mm', {}).get('squad', {})
            
            if ranked_squad.get('matches', 0) > 0:
                embed.add_field(
                    name="üéØ Squad Ranqueado",
                    value=f"K/D: `{ranked_squad.get('kd', 0)}`\nPartidas: `{ranked_squad.get('matches', 0)}`\nVit√≥rias: `{ranked_squad.get('wins', 0)}`",
                    inline=True
                )
            
            if mm_squad.get('matches', 0) > 0:
                embed.add_field(
                    name="üéÆ Squad MM",
                    value=f"K/D: `{mm_squad.get('kd', 0)}`\nPartidas: `{mm_squad.get('matches', 0)}`\nVit√≥rias: `{mm_squad.get('wins', 0)}`",
                    inline=True
                )
            
            # Mostrar conquistas desbloqueadas
            if result.get('achievements'):
                achievements_text = "\n".join([f"üèÖ {ach}" for ach in result['achievements']])
                embed.add_field(
                    name="üéâ Novas Conquistas",
                    value=achievements_text,
                    inline=False
                )
            
            embed.color = 0x00FF00  # Verde para sucesso
            
        else:
            embed.set_field_at(
                0,
                name="üìä Status",
                value=f"‚ùå **Erro na atualiza√ß√£o:** {result.get('error', 'Erro desconhecido')}",
                inline=False
            )
            embed.color = 0xFF0000  # Vermelho para erro
        
        await interaction.edit_original_response(embed=embed)
        
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro na Atualiza√ß√£o For√ßada",
            description=f"Erro inesperado: {str(e)}",
            color=0xFF0000,
            timestamp=datetime.now()
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="pubg_roles_config", description="‚öôÔ∏è [ADMIN] Configura sistema de cargos autom√°ticos PUBG")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    valor="Valor da configura√ß√£o (quando aplic√°vel)"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="Ativar Sistema", value="enable"),
    discord.app_commands.Choice(name="Desativar Sistema", value="disable"),
    discord.app_commands.Choice(name="Status", value="status"),
    discord.app_commands.Choice(name="Criar Cargos", value="create_roles"),
    discord.app_commands.Choice(name="Atualizar Todos", value="update_all"),
    discord.app_commands.Choice(name="Canal An√∫ncios", value="set_channel"),
    discord.app_commands.Choice(name="Setup Emojis", value="setup_emojis")
])
async def pubg_roles_config(interaction: discord.Interaction, acao: str, valor: str = None):
    """Configura o sistema de cargos autom√°ticos baseados no rank PUBG"""
    # Verificar se √© admin
    if not interaction.user.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Acesso Negado",
            description="Apenas administradores podem usar este comando.",
            color=0xFF0000
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    
    try:
        if acao == "enable":
            bot.pubg_rank_roles.config['enabled'] = True
            bot.pubg_rank_roles.save_config()
            embed = discord.Embed(
                title="‚úÖ Sistema Ativado",
                description="Sistema de cargos autom√°ticos PUBG foi ativado.",
                color=0x00FF00
            )
        
        elif acao == "disable":
            bot.pubg_rank_roles.config['enabled'] = False
            bot.pubg_rank_roles.save_config()
            embed = discord.Embed(
                title="‚èπÔ∏è Sistema Desativado",
                description="Sistema de cargos autom√°ticos PUBG foi desativado.",
                color=0xFFFF00
            )
        
        elif acao == "status":
            config = bot.pubg_rank_roles.config
            status = "üü¢ Ativo" if config['enabled'] else "üî¥ Inativo"
            channel = f"<#{config['announcement_channel']}>" if config['announcement_channel'] else "N√£o configurado"
            
            embed = discord.Embed(
                title="üìä Status do Sistema de Cargos PUBG",
                color=0x0099FF
            )
            embed.add_field(name="Status", value=status, inline=True)
            embed.add_field(name="Atribui√ß√£o Autom√°tica", value="‚úÖ" if config['auto_assign'] else "‚ùå", inline=True)
            embed.add_field(name="Canal de An√∫ncios", value=channel, inline=False)
            embed.add_field(name="An√∫ncios de Promo√ß√£o", value="‚úÖ" if config['announce_promotions'] else "‚ùå", inline=True)
            embed.add_field(name="An√∫ncios de Rebaixamento", value="‚úÖ" if config['announce_demotions'] else "‚ùå", inline=True)
        
        elif acao == "create_roles":
            created_roles = await bot.pubg_rank_roles.create_rank_roles(interaction.guild)
            if created_roles:
                roles_list = "\n".join([f"‚Ä¢ {role.name} {role.mention}" for role in created_roles])
                embed = discord.Embed(
                    title="‚úÖ Cargos Criados",
                    description=f"Foram criados {len(created_roles)} cargos:\n\n{roles_list}",
                    color=0x00FF00
                )
            else:
                embed = discord.Embed(
                    title="‚ÑπÔ∏è Nenhum Cargo Criado",
                    description="Todos os cargos PUBG j√° existem no servidor.",
                    color=0x0099FF
                )
        
        elif acao == "update_all":
            if not bot.pubg_rank_roles.config['enabled']:
                embed = discord.Embed(
                    title="‚ùå Sistema Desativado",
                    description="Ative o sistema primeiro com `/pubg_roles_config enable`.",
                    color=0xFF0000
                )
            else:
                updated_count = await bot.pubg_rank_roles.update_all_member_ranks(interaction.guild)
                embed = discord.Embed(
                    title="‚úÖ Atualiza√ß√£o Conclu√≠da",
                    description=f"Foram atualizados os cargos de {updated_count} membros baseado em seus ranks PUBG.",
                    color=0x00FF00
                )
        
        elif acao == "set_channel":
            if valor:
                try:
                    channel_id = int(valor.replace('<#', '').replace('>', ''))
                    channel = interaction.guild.get_channel(channel_id)
                    if channel:
                        bot.pubg_rank_roles.config['announcement_channel'] = channel_id
                        bot.pubg_rank_roles.save_config()
                        embed = discord.Embed(
                            title="‚úÖ Canal Configurado",
                            description=f"Canal de an√∫ncios definido como {channel.mention}",
                            color=0x00FF00
                        )
                    else:
                        embed = discord.Embed(
                            title="‚ùå Canal Inv√°lido",
                            description="Canal n√£o encontrado.",
                            color=0xFF0000
                        )
                except ValueError:
                    embed = discord.Embed(
                        title="‚ùå Formato Inv√°lido",
                        description="Use o formato: #canal ou ID do canal",
                        color=0xFF0000
                    )
            else:
                embed = discord.Embed(
                    title="‚ùå Canal Necess√°rio",
                    description="Especifique o canal: `/pubg_roles_config set_channel #canal`",
                    color=0xFF0000
                )
        
        elif acao == "setup_emojis":
            results = await bot.pubg_rank_roles.setup_emojis(interaction.guild)
            if results:
                success_count = sum(1 for success in results.values() if success)
                total_count = len(results)
                
                embed = discord.Embed(
                    title="‚úÖ Setup de Emojis Conclu√≠do",
                    description=f"Foram processados {success_count}/{total_count} emojis customizados para as patentes PUBG.",
                    color=0x00FF00
                )
                
                # Listar emojis processados
                emoji_list = []
                for emoji_name, success in results.items():
                    status = "‚úÖ" if success else "‚ùå"
                    emoji_list.append(f"{status} {emoji_name}")
                
                if emoji_list:
                    embed.add_field(
                        name="üìã Emojis Processados",
                        value="\n".join(emoji_list[:10]),  # Limitar a 10 para n√£o exceder limite
                        inline=False
                    )
            else:
                embed = discord.Embed(
                    title="‚ÑπÔ∏è Nenhum Emoji Processado",
                    description="N√£o foram encontrados emojis para processar ou todos j√° existem no servidor.",
                    color=0x0099FF
                )
        
        else:
            embed = discord.Embed(
                title="‚ùå A√ß√£o Inv√°lida",
                description="A√ß√£o n√£o reconhecida.",
                color=0xFF0000
            )
        
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro na Configura√ß√£o",
            description=f"Erro inesperado: {str(e)}",
            color=0xFF0000,
            timestamp=datetime.now()
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="meu_rank_pubg", description="üéÆ Mostra seu rank PUBG atual e cargo correspondente")
async def meu_rank_pubg(interaction: discord.Interaction):
    """Mostra o rank PUBG do usu√°rio e cargo correspondente"""
    await interaction.response.defer()
    
    try:
        # Verificar se usu√°rio est√° registrado
        user_data = bot.storage.get_user_data(interaction.user.id)
        if not user_data or 'pubg_name' not in user_data:
            embed = discord.Embed(
                title="‚ùå N√£o Registrado",
                description="Voc√™ precisa se registrar primeiro com `/register_pubg`.",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obter dados PUBG
        pubg_data = await bot.pubg_api.get_player_stats(
            user_data['pubg_name'], 
            user_data.get('shard', 'steam')
        )
        
        if not pubg_data:
            embed = discord.Embed(
                title="‚ùå Dados N√£o Encontrados",
                description="N√£o foi poss√≠vel obter seus dados PUBG.",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Calcular pontos PUBG
        pubg_points = bot.pubg_rank_roles.calculate_pubg_points(pubg_data)
        current_tier = bot.pubg_rank_roles.get_tier_by_points(pubg_points)
        
        # Verificar cargo atual
        current_role = None
        for role in interaction.user.roles:
            if role.name in [tier.role_name for tier in bot.pubg_rank_roles.PubgRankTier]:
                current_role = role
                break
        
        embed = discord.Embed(
            title=f"üéÆ Rank PUBG - {interaction.user.display_name}",
            color=current_tier.color
        )
        
        embed.add_field(
            name="üèÜ Patente Atual",
            value=f"{current_tier.emoji} **{current_tier.name}**",
            inline=True
        )
        
        embed.add_field(
            name="üìä Pontos PUBG",
            value=f"**{pubg_points:,}** pontos",
            inline=True
        )
        
        embed.add_field(
            name="üéØ Cargo Discord",
            value=current_role.mention if current_role else "‚ùå N√£o atribu√≠do",
            inline=True
        )
        
        # Pr√≥xima patente
        next_tier = None
        for tier in bot.pubg_rank_roles.PubgRankTier:
            if tier.min_points > pubg_points:
                next_tier = tier
                break
        
        if next_tier:
            points_needed = next_tier.min_points - pubg_points
            embed.add_field(
                name="‚¨ÜÔ∏è Pr√≥xima Patente",
                value=f"{next_tier.emoji} {next_tier.name}\n**{points_needed:,}** pontos necess√°rios",
                inline=False
            )
        else:
            embed.add_field(
                name="üëë Status",
                value="**Voc√™ j√° alcan√ßou a patente m√°xima!**",
                inline=False
            )
        
        # Estat√≠sticas base
        if 'ranked' in pubg_data and 'squad' in pubg_data['ranked']:
            stats = pubg_data['ranked']['squad']
            embed.add_field(
                name="üìà Estat√≠sticas (Squad Ranked)",
                value=f"**KD:** {stats.get('kd', 0):.2f}\n"
                      f"**Taxa de Vit√≥ria:** {stats.get('win_rate', 0):.1f}%\n"
                      f"**Dano M√©dio:** {stats.get('avg_damage', 0):.0f}",
                inline=True
            )
        
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.timestamp = datetime.now()
        
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro ao Obter Rank",
            description=f"Erro inesperado: {str(e)}",
            color=0xFF0000,
            timestamp=datetime.now()
        )
        await interaction.followup.send(embed=embed)

# ==================== COMANDOS DO SISTEMA DE EMBLEMAS ====================

@bot.tree.command(name="badges_config", description="‚öôÔ∏è [ADMIN] Configura sistema de emblemas/badges")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    valor="Valor da configura√ß√£o (quando aplic√°vel)"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="Ativar Sistema", value="enable"),
    discord.app_commands.Choice(name="Desativar Sistema", value="disable"),
    discord.app_commands.Choice(name="Status", value="status"),
    discord.app_commands.Choice(name="Verificar Todos", value="check_all"),
    discord.app_commands.Choice(name="Canal An√∫ncios", value="set_channel"),
    discord.app_commands.Choice(name="Reset Emblemas", value="reset_badges")
])
async def badges_config(interaction: discord.Interaction, acao: str, valor: str = None):
    """Configura o sistema de emblemas"""
    # Verificar se √© admin
    if not interaction.user.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Acesso Negado",
            description="Apenas administradores podem usar este comando.",
            color=0xFF0000
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    
    try:
        if acao == "enable":
            result = await bot.badge_system.enable_system(interaction.guild.id)
            if result:
                embed = discord.Embed(
                    title="‚úÖ Sistema Ativado",
                    description="Sistema de emblemas foi ativado com sucesso!",
                    color=0x00FF00
                )
            else:
                embed = discord.Embed(
                    title="‚ö†Ô∏è Sistema j√° Ativo",
                    description="O sistema de emblemas j√° estava ativado.",
                    color=0xFFFF00
                )
        
        elif acao == "disable":
            result = await bot.badge_system.disable_system(interaction.guild.id)
            embed = discord.Embed(
                title="üî¥ Sistema Desativado",
                description="Sistema de emblemas foi desativado.",
                color=0xFF0000
            )
        
        elif acao == "status":
            config = await bot.badge_system.get_config(interaction.guild.id)
            status = "üü¢ Ativo" if config.get('enabled', False) else "üî¥ Inativo"
            
            embed = discord.Embed(
                title="üìä Status do Sistema de Emblemas",
                color=0x00BFFF
            )
            embed.add_field(name="Status", value=status, inline=True)
            embed.add_field(name="Verifica√ß√£o Autom√°tica", value="‚úÖ Sim" if config.get('auto_check', True) else "‚ùå N√£o", inline=True)
            embed.add_field(name="Canal de An√∫ncios", value=f"<#{config.get('announcement_channel')}>" if config.get('announcement_channel') else "N√£o definido", inline=True)
        
        elif acao == "check_all":
            embed = discord.Embed(
                title="üîÑ Verificando Emblemas",
                description="Iniciando verifica√ß√£o de emblemas para todos os membros...",
                color=0x00BFFF
            )
            await interaction.followup.send(embed=embed)
            
            # Verificar emblemas para todos os membros
            updated_count = await bot.badge_system.check_all_members(interaction.guild)
            
            embed = discord.Embed(
                title="‚úÖ Verifica√ß√£o Conclu√≠da",
                description=f"Verifica√ß√£o conclu√≠da! {updated_count} membros tiveram emblemas atualizados.",
                color=0x00FF00
            )
            await interaction.followup.send(embed=embed)
            return
        
        elif acao == "set_channel":
            if not valor:
                embed = discord.Embed(
                    title="‚ùå Erro",
                    description="Voc√™ precisa mencionar um canal ou fornecer o ID do canal.",
                    color=0xFF0000
                )
            else:
                try:
                    channel_id = int(valor.replace('<#', '').replace('>', ''))
                    channel = interaction.guild.get_channel(channel_id)
                    if channel:
                        await bot.badge_system.set_announcement_channel(interaction.guild.id, channel_id)
                        embed = discord.Embed(
                            title="‚úÖ Canal Definido",
                            description=f"Canal de an√∫ncios definido para {channel.mention}",
                            color=0x00FF00
                        )
                    else:
                        embed = discord.Embed(
                            title="‚ùå Erro",
                            description="Canal n√£o encontrado.",
                            color=0xFF0000
                        )
                except ValueError:
                    embed = discord.Embed(
                        title="‚ùå Erro",
                        description="ID de canal inv√°lido.",
                        color=0xFF0000
                    )
        
        elif acao == "reset_badges":
            # Reset de emblemas (cuidado!)
            await bot.badge_system.reset_all_badges(interaction.guild.id)
            embed = discord.Embed(
                title="üîÑ Reset Realizado",
                description="Todos os emblemas foram resetados. Use 'Verificar Todos' para recalcular.",
                color=0xFFFF00
            )
        
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao configurar sistema de emblemas: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="reset_servidor", description="üîÑ ADMIN: Reseta todos os dados do servidor e apaga todas as mensagens")
@discord.app_commands.describe(
    confirmacao="Digite 'CONFIRMAR' para resetar todos os dados e apagar mensagens"
)
async def reset_servidor(interaction: discord.Interaction, confirmacao: str):
    """Comando para resetar todos os dados do servidor e apagar mensagens (ADMIN ONLY)"""
    # Verificar se √© administrador
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå Apenas administradores podem usar este comando!", ephemeral=True)
        return
    
    if confirmacao.upper() != "CONFIRMAR":
        await interaction.response.send_message(
            "‚ö†Ô∏è Para resetar todos os dados e apagar mensagens, digite: `/reset_servidor confirmacao:CONFIRMAR`\n"
            "**ATEN√á√ÉO:** Esta a√ß√£o ir√° apagar TODOS os dados do servidor e TODAS as mensagens!", 
            ephemeral=True
        )
        return
    
    await interaction.response.defer()
    
    try:
        logger.info(f"Iniciando reset completo do servidor por {interaction.user.display_name}")
        
        # Criar backup antes do reset
        if hasattr(bot, 'storage'):
            try:
                if hasattr(bot.storage, 'create_backup'):
                    backup_file = await bot.storage.create_backup()
                    logger.info(f"Backup criado: {backup_file}")
            except Exception as backup_error:
                logger.warning(f"Erro ao criar backup: {backup_error}")
        
        # Reset dos sistemas usando PostgreSQL
        reset_count = 0
        
        # Reset do sistema de badges
        try:
            if hasattr(bot, 'badge_system'):
                bot.badge_system.user_badges = {}
                if hasattr(bot.badge_system, '_save_user_badges'):
                    bot.badge_system._save_user_badges()
                reset_count += 1
                logger.info("‚úÖ Sistema de badges resetado")
        except Exception as e:
            logger.error(f"Erro ao resetar badges: {e}")
        
        # Reset do sistema de conquistas
        try:
            if hasattr(bot, 'achievement_system'):
                bot.achievement_system.user_achievements = {}
                if hasattr(bot.achievement_system, '_save_user_achievements'):
                    bot.achievement_system._save_user_achievements()
                reset_count += 1
                logger.info("‚úÖ Sistema de conquistas resetado")
        except Exception as e:
            logger.error(f"Erro ao resetar conquistas: {e}")
        
        # Reset do sistema de ranking dual
        try:
            if hasattr(bot, 'dual_ranking_system'):
                bot.dual_ranking_system.user_data = {}
                if hasattr(bot.dual_ranking_system, '_save_user_data'):
                    bot.dual_ranking_system._save_user_data()
                reset_count += 1
                logger.info("‚úÖ Sistema de ranking dual resetado")
        except Exception as e:
            logger.error(f"Erro ao resetar ranking dual: {e}")
        
        # Reset do sistema de rank
        try:
            if hasattr(bot, 'rank_system'):
                bot.rank_system.user_data = {}
                if hasattr(bot.rank_system, '_save_user_data'):
                    bot.rank_system._save_user_data()
                reset_count += 1
                logger.info("‚úÖ Sistema de rank resetado")
        except Exception as e:
            logger.error(f"Erro ao resetar rank: {e}")
        
        # Reset do PostgreSQL (se dispon√≠vel)
        try:
            if hasattr(bot, 'storage') and hasattr(bot.storage, 'db'):
                async with bot.storage.db.pool.acquire() as conn:
                    # Limpar tabelas principais (mantendo estrutura)
                    await conn.execute("DELETE FROM sessions WHERE user_id > 0")
                    await conn.execute("DELETE FROM rankings WHERE user_id > 0")
                    await conn.execute("UPDATE users SET total_sessions = 0, total_time = 0, is_checked_in = false, season_points = 0, total_matches = 0, wins = 0, kills = 0")
                    logger.info("‚úÖ Banco PostgreSQL limpo")
                    reset_count += 1
        except Exception as e:
            logger.error(f"Erro ao limpar PostgreSQL: {e}")
        
        # Reset do sistema de clipes (JSON)
        try:
            if hasattr(bot, 'storage') and hasattr(bot.storage, 'data'):
                if 'clips' in bot.storage.data:
                    bot.storage.data['clips'] = {}
                    bot.storage._save_data()
                    reset_count += 1
                    logger.info("‚úÖ Sistema de clipes resetado")
        except Exception as e:
            logger.error(f"Erro ao resetar clipes: {e}")
        
        # Limpar mensagens de forma mais eficiente
        deleted_messages = 0
        processed_channels = 0
        failed_channels = 0
        
        # Processar canais em lotes menores para evitar rate limiting
        channels_to_process = [ch for ch in interaction.guild.text_channels 
                             if ch.permissions_for(interaction.guild.me).manage_messages]
        
        for i, channel in enumerate(channels_to_process):
            try:
                # Atualizar progresso a cada 5 canais
                if i % 5 == 0 and i > 0:
                    progress_embed = discord.Embed(
                        title="üîÑ Reset em Progresso",
                        description=f"Processando canal {i+1}/{len(channels_to_process)}\n"
                                  f"Mensagens deletadas: {deleted_messages}",
                        color=0xFFFF00
                    )
                    try:
                        await interaction.edit_original_response(embed=progress_embed)
                    except:
                        pass
                
                # Usar bulk delete quando poss√≠vel (mensagens < 14 dias)
                messages_to_delete = []
                old_messages = []
                
                async for message in channel.history(limit=None):
                    # Mensagens mais antigas que 14 dias precisam ser deletadas individualmente
                    if (datetime.utcnow() - message.created_at).days >= 14:
                        old_messages.append(message)
                    else:
                        messages_to_delete.append(message)
                
                # Bulk delete para mensagens recentes
                if messages_to_delete:
                    # Dividir em lotes de 100 (limite do Discord)
                    for j in range(0, len(messages_to_delete), 100):
                        batch = messages_to_delete[j:j+100]
                        try:
                            await channel.delete_messages(batch)
                            deleted_messages += len(batch)
                            await asyncio.sleep(1)  # Pausa entre lotes
                        except discord.HTTPException:
                            # Se bulk delete falhar, deletar individualmente
                            for msg in batch:
                                try:
                                    await msg.delete()
                                    deleted_messages += 1
                                    await asyncio.sleep(0.1)
                                except:
                                    pass
                
                # Deletar mensagens antigas individualmente
                for message in old_messages:
                    try:
                        await message.delete()
                        deleted_messages += 1
                        await asyncio.sleep(0.2)  # Pausa maior para mensagens antigas
                    except:
                        pass
                        
                processed_channels += 1
                logger.info(f"Canal {channel.name} processado: {len(messages_to_delete) + len(old_messages)} mensagens")
                
            except discord.Forbidden:
                logger.warning(f"Sem permiss√£o para acessar canal: {channel.name}")
                failed_channels += 1
            except Exception as channel_error:
                logger.error(f"Erro ao processar canal {channel.name}: {channel_error}")
                failed_channels += 1
        
        # Embed de resultado final
        embed = discord.Embed(
            title="üîÑ Reset Completo do Servidor",
            description="Reset executado com sucesso!",
            color=0x00FF00,
            timestamp=datetime.utcnow()
        )
        
        embed.add_field(
            name="üìä Sistemas Resetados",
            value=f"‚Ä¢ {reset_count} sistemas limpos\n"
                  f"‚Ä¢ Badges e Conquistas\n"
                  f"‚Ä¢ Rankings e Estat√≠sticas\n"
                  f"‚Ä¢ Banco de Dados PostgreSQL\n"
                  f"‚Ä¢ Sistema de Clipes",
            inline=False
        )
        
        embed.add_field(
            name="üóëÔ∏è Limpeza de Mensagens",
            value=f"‚Ä¢ **{deleted_messages:,}** mensagens deletadas\n"
                  f"‚Ä¢ **{processed_channels}** canais processados\n"
                  f"‚Ä¢ **{failed_channels}** canais com erro",
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è Informa√ß√µes",
            value=f"‚Ä¢ Backup criado automaticamente\n"
                  f"‚Ä¢ Estrutura do servidor mantida\n"
                  f"‚Ä¢ Logs detalhados salvos",
            inline=False
        )
        
        embed.set_footer(
            text=f"Reset executado por {interaction.user.display_name}",
            icon_url=interaction.user.display_avatar.url
        )
        
        await interaction.followup.send(embed=embed)
        logger.info(f"Reset completo finalizado: {deleted_messages} mensagens, {reset_count} sistemas")
        
    except Exception as e:
        logger.error(f"Erro cr√≠tico no reset do servidor: {e}")
        error_embed = discord.Embed(
            title="‚ùå Erro no Reset",
            description=f"Ocorreu um erro durante o reset:\n```{str(e)[:1000]}```",
            color=0xFF0000
        )
        error_embed.add_field(
            name="üîß Solu√ß√£o",
            value="‚Ä¢ Verifique os logs do bot\n‚Ä¢ Tente novamente em alguns minutos\n‚Ä¢ Contate o desenvolvedor se persistir",
            inline=False
        )
        await interaction.followup.send(embed=error_embed, ephemeral=True)

@bot.tree.command(name="meus_badges", description="üèÜ Mostra seus emblemas conquistados")
@discord.app_commands.describe(
    usuario="Usu√°rio para ver emblemas (opcional)"
)
async def meus_badges(interaction: discord.Interaction, usuario: discord.Member = None):
    """Mostra emblemas do usu√°rio"""
    target_user = usuario or interaction.user
    await interaction.response.defer()
    
    try:
        user_badge_data = bot.badge_system.get_user_badges(str(target_user.id))
        badges = user_badge_data.get("badges", [])
        
        if not badges:
            embed = discord.Embed(
                title="üèÜ Emblemas",
                description=f"{target_user.display_name} ainda n√£o conquistou nenhum emblema.",
                color=0x808080
            )
            embed.set_thumbnail(url=target_user.display_avatar.url)
            await interaction.followup.send(embed=embed)
            return
        
        # Organizar emblemas por categoria
        categories = {}
        for badge_info in badges:
            badge_name = badge_info.get("name")
            category = badge_info.get("category")
            if category not in categories:
                categories[category] = []
            categories[category].append(badge_info)
        
        embed = discord.Embed(
            title=f"üèÜ Emblemas de {target_user.display_name}",
            description=f"Total: **{len(badges)}** emblemas conquistados",
            color=0xFFD700
        )
        embed.set_thumbnail(url=target_user.display_avatar.url)
        
        # Adicionar emblemas por categoria
        for category, badge_list in categories.items():
            category_names = {
                'combat': '‚öîÔ∏è Combate',
                'survival': 'üõ°Ô∏è Sobreviv√™ncia', 
                'support': 'ü§ù Suporte',
                'achievement': 'üèÜ Conquista',
                'special': '‚≠ê Especial',
                'weapons': 'üî´ Armas',
                'progression': 'üìà Progress√£o',
                'seasonal': 'üéØ Sazonal'
            }
            
            badge_text = ""
            for badge in badge_list[:5]:  # M√°ximo 5 por categoria
                rarity_emoji = {
                    'comum': 'ü•â',
                    'raro': 'ü•à', 
                    '√©pico': 'ü•á',
                    'lend√°rio': 'üíé',
                    'm√≠tico': 'üëë'
                }.get(badge.get('rarity'), 'üèÖ')
                
                badge_text += f"{badge.get('emoji', 'üèÖ')} **{badge.get('name', 'Emblema')}** {rarity_emoji}\n"
            
            if len(badge_list) > 5:
                badge_text += f"*... e mais {len(badge_list) - 5} emblemas*"
            
            embed.add_field(
                name=category_names.get(category, category.title()),
                value=badge_text or "Nenhum emblema",
                inline=True
            )
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao buscar emblemas: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="badges_disponiveis", description="üìã Lista todos os emblemas dispon√≠veis")
@discord.app_commands.describe(
    categoria="Filtrar por categoria espec√≠fica"
)
@discord.app_commands.choices(categoria=[
    discord.app_commands.Choice(name="‚öîÔ∏è Combate", value="combat"),
    discord.app_commands.Choice(name="üõ°Ô∏è Sobreviv√™ncia", value="survival"),
    discord.app_commands.Choice(name="ü§ù Suporte", value="support"),
    discord.app_commands.Choice(name="üèÜ Conquista", value="achievement"),
    discord.app_commands.Choice(name="‚≠ê Especial", value="special")
])
async def badges_disponiveis(interaction: discord.Interaction, categoria: str = None):
    """Lista todos os emblemas dispon√≠veis"""
    await interaction.response.defer()
    
    try:
        all_badges = list(BadgeType)
        
        if categoria:
            all_badges = [b for b in all_badges if b.value['category'] == categoria]
        
        if not all_badges:
            embed = discord.Embed(
                title="üìã Emblemas Dispon√≠veis",
                description="Nenhum emblema encontrado para esta categoria.",
                color=0x808080
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Organizar por raridade
        rarity_order = ['mythic', 'legendary', 'epic', 'rare', 'common']
        all_badges.sort(key=lambda x: rarity_order.index(x.value['rarity']))
        
        embed = discord.Embed(
            title="üìã Emblemas Dispon√≠veis",
            description=f"Total: **{len(all_badges)}** emblemas",
            color=0x00BFFF
        )
        
        current_field = ""
        field_count = 0
        
        for badge in all_badges:
            rarity_emoji = {
                'common': 'ü•â',
                'rare': 'ü•à',
                'epic': 'ü•á', 
                'legendary': 'üíé',
                'mythic': 'üëë'
            }.get(badge.value['rarity'], 'üèÖ')
            
            badge_line = f"{badge.value['emoji']} **{badge.value['name']}** {rarity_emoji}\n*{badge.value['description']}*\n\n"
            
            if len(current_field + badge_line) > 1024 or field_count >= 25:
                if current_field:
                    embed.add_field(
                        name=f"Emblemas ({field_count + 1})",
                        value=current_field,
                        inline=False
                    )
                current_field = badge_line
                field_count = 0
            else:
                current_field += badge_line
                field_count += 1
        
        if current_field:
            embed.add_field(
                name=f"Emblemas ({field_count + 1})",
                value=current_field,
                inline=False
            )
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao listar emblemas: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="ranking_badges", description="üèÖ Mostra ranking de emblemas do servidor")
@discord.app_commands.describe(
    limite="N√∫mero de usu√°rios no ranking (m√°ximo 20)"
)
async def ranking_badges(interaction: discord.Interaction, limite: int = 10):
    """Mostra ranking de emblemas"""
    await interaction.response.defer()
    
    try:
        if limite > 20:
            limite = 20
        elif limite < 1:
            limite = 10
        
        ranking = await bot.badge_system.get_badges_ranking(interaction.guild.id, limite)
        
        if not ranking:
            embed = discord.Embed(
                title="üèÖ Ranking de Emblemas",
                description="Nenhum membro possui emblemas ainda.",
                color=0x808080
            )
            await interaction.followup.send(embed=embed)
            return
        
        embed = discord.Embed(
            title="üèÖ Ranking de Emblemas",
            description=f"Top {len(ranking)} membros com mais emblemas",
            color=0xFFD700
        )
        
        ranking_text = ""
        for i, (user_id, badge_count) in enumerate(ranking, 1):
            try:
                user = interaction.guild.get_member(user_id)
                if user:
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
                    ranking_text += f"{medal} **{i}¬∫** {user.display_name} - **{badge_count}** emblemas\n"
            except:
                continue
        
        embed.add_field(
            name="üèÜ Ranking",
            value=ranking_text or "Nenhum dado dispon√≠vel",
            inline=False
        )
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao gerar ranking: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

# ==================== COMANDOS DO SISTEMA DE TEMPORADAS ====================

@bot.tree.command(name="temporadas_config", description="‚öôÔ∏è [ADMIN] Configura sistema de temporadas")
@discord.app_commands.describe(
    acao="A√ß√£o a realizar",
    valor="Valor da configura√ß√£o (quando aplic√°vel)"
)
@discord.app_commands.choices(acao=[
    discord.app_commands.Choice(name="Ativar Sistema", value="enable"),
    discord.app_commands.Choice(name="Desativar Sistema", value="disable"),
    discord.app_commands.Choice(name="Status", value="status"),
    discord.app_commands.Choice(name="Criar Temporada", value="create_season"),
    discord.app_commands.Choice(name="Iniciar Temporada", value="start_season"),
    discord.app_commands.Choice(name="Finalizar Temporada", value="end_season"),
    discord.app_commands.Choice(name="Canal An√∫ncios", value="set_channel")
])
async def temporadas_config(interaction: discord.Interaction, acao: str, valor: str = None):
    """Configura o sistema de temporadas"""
    # Verificar permiss√µes de administrador
    if not interaction.user.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Acesso Negado",
            description="Apenas administradores podem usar este comando.",
            color=0xFF0000
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    await interaction.response.defer()
    
    try:
        if acao == "enable":
            bot.season_system.config["enabled"] = True
            bot.season_system._save_config()
            
            embed = discord.Embed(
                title="‚úÖ Sistema Ativado",
                description="Sistema de temporadas foi ativado com sucesso!",
                color=0x00FF00
            )
            
        elif acao == "disable":
            bot.season_system.config["enabled"] = False
            bot.season_system._save_config()
            
            embed = discord.Embed(
                title="‚èπÔ∏è Sistema Desativado",
                description="Sistema de temporadas foi desativado.",
                color=0xFFA500
            )
            
        elif acao == "status":
            current_season = bot.season_system.get_current_season()
            total_seasons = len(bot.season_system.get_all_seasons())
            
            embed = discord.Embed(
                title="üìä Status do Sistema de Temporadas",
                color=0x00BFFF
            )
            
            embed.add_field(
                name="üîß Sistema",
                value="‚úÖ Ativado" if bot.season_system.config["enabled"] else "‚ùå Desativado",
                inline=True
            )
            
            embed.add_field(
                name="üìà Total de Temporadas",
                value=f"{total_seasons} temporadas",
                inline=True
            )
            
            if current_season:
                embed.add_field(
                    name="üèÜ Temporada Atual",
                    value=f"{current_season.name}",
                    inline=True
                )
                
                embed.add_field(
                    name="‚è∞ Tempo Restante",
                    value=f"{current_season.get_remaining_days()} dias",
                    inline=True
                )
                
                embed.add_field(
                    name="üé® Tema",
                    value=current_season.theme.title(),
                    inline=True
                )
                
                embed.add_field(
                    name="üéÅ Recompensas",
                    value=f"{len(current_season.rewards)} dispon√≠veis",
                    inline=True
                )
            else:
                embed.add_field(
                    name="üèÜ Temporada Atual",
                    value="Nenhuma temporada ativa",
                    inline=False
                )
            
            channel_id = bot.season_system.config.get("announcement_channel_id")
            if channel_id:
                channel = bot.get_channel(channel_id)
                embed.add_field(
                    name="üì¢ Canal de An√∫ncios",
                    value=channel.mention if channel else "Canal n√£o encontrado",
                    inline=False
                )
            
        elif acao == "create_season":
            if not valor:
                embed = discord.Embed(
                    title="‚ùå Erro",
                    description="Especifique o nome da temporada no campo 'valor'.",
                    color=0xFF0000
                )
            else:
                season = bot.season_system.create_season(
                    name=valor,
                    description=f"Nova temporada: {valor}"
                )
                
                embed = discord.Embed(
                    title="‚úÖ Temporada Criada",
                    description=f"Temporada '{season.name}' criada com sucesso!",
                    color=0x00FF00
                )
                
                embed.add_field(
                    name="üÜî ID",
                    value=season.season_id,
                    inline=True
                )
                
                embed.add_field(
                    name="üìÖ Dura√ß√£o",
                    value=f"{season.get_duration_days()} dias",
                    inline=True
                )
                
                embed.add_field(
                    name="üé® Tema",
                    value=season.theme.title(),
                    inline=True
                )
        
        elif acao == "start_season":
            current_season = bot.season_system.get_current_season()
            if current_season:
                embed = discord.Embed(
                    title="‚ùå Erro",
                    description=f"J√° existe uma temporada ativa: {current_season.name}",
                    color=0xFF0000
                )
            else:
                # Pegar a temporada mais recente que n√£o est√° ativa
                all_seasons = bot.season_system.get_all_seasons()
                upcoming_seasons = [s for s in all_seasons if s.status.value == "upcoming"]
                
                if not upcoming_seasons:
                    embed = discord.Embed(
                        title="‚ùå Erro",
                        description="N√£o h√° temporadas pendentes para iniciar.",
                        color=0xFF0000
                    )
                else:
                    season_to_start = upcoming_seasons[0]
                    success = await bot.season_system.start_season(season_to_start)
                    
                    if success:
                        embed = discord.Embed(
                            title="üöÄ Temporada Iniciada",
                            description=f"Temporada '{season_to_start.name}' iniciada com sucesso!",
                            color=0x00FF00
                        )
                    else:
                        embed = discord.Embed(
                            title="‚ùå Erro",
                            description="Falha ao iniciar temporada.",
                            color=0xFF0000
                        )
        
        elif acao == "end_season":
            current_season = bot.season_system.get_current_season()
            if not current_season:
                embed = discord.Embed(
                    title="‚ùå Erro",
                    description="N√£o h√° temporada ativa para finalizar.",
                    color=0xFF0000
                )
            else:
                success = await bot.season_system.end_season(current_season)
                
                if success:
                    embed = discord.Embed(
                        title="üèÅ Temporada Finalizada",
                        description=f"Temporada '{current_season.name}' finalizada e recompensas distribu√≠das!",
                        color=0x00FF00
                    )
                else:
                    embed = discord.Embed(
                        title="‚ùå Erro",
                        description="Falha ao finalizar temporada.",
                        color=0xFF0000
                    )
        
        elif acao == "set_channel":
            if not valor:
                embed = discord.Embed(
                    title="‚ùå Erro",
                    description="Especifique o ID do canal no campo 'valor'.",
                    color=0xFF0000
                )
            else:
                try:
                    channel_id = int(valor)
                    channel = bot.get_channel(channel_id)
                    
                    if not channel:
                        embed = discord.Embed(
                            title="‚ùå Erro",
                            description="Canal n√£o encontrado.",
                            color=0xFF0000
                        )
                    else:
                        bot.season_system.config["announcement_channel_id"] = channel_id
                        bot.season_system._save_config()
                        
                        embed = discord.Embed(
                            title="‚úÖ Canal Configurado",
                            description=f"Canal de an√∫ncios definido para {channel.mention}",
                            color=0x00FF00
                        )
                except ValueError:
                    embed = discord.Embed(
                        title="‚ùå Erro",
                        description="ID do canal inv√°lido.",
                        color=0xFF0000
                    )
        
        else:
            embed = discord.Embed(
                title="‚ùå Erro",
                description="A√ß√£o n√£o reconhecida.",
                color=0xFF0000
            )
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao configurar temporadas: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="temporada_atual", description="üèÜ Mostra informa√ß√µes da temporada atual")
async def temporada_atual(interaction: discord.Interaction):
    """Mostra informa√ß√µes da temporada atual"""
    await interaction.response.defer()
    
    try:
        current_season = bot.season_system.get_current_season()
        
        if not current_season:
            embed = discord.Embed(
                title="üìÖ Nenhuma Temporada Ativa",
                description="N√£o h√° temporada ativa no momento.",
                color=0xFFA500
            )
        else:
            theme_data = bot.season_system.config["themes"].get(
                current_season.theme, 
                bot.season_system.config["themes"]["default"]
            )
            
            embed = discord.Embed(
                title=f"{theme_data['emoji']} {current_season.name}",
                description=current_season.description,
                color=theme_data["color"]
            )
            
            embed.add_field(
                name="üìÖ Dura√ß√£o Total",
                value=f"{current_season.get_duration_days()} dias",
                inline=True
            )
            
            embed.add_field(
                name="‚è∞ Tempo Restante",
                value=f"{current_season.get_remaining_days()} dias",
                inline=True
            )
            
            embed.add_field(
                name="üé® Tema",
                value=theme_data.get("name", current_season.theme.title()),
                inline=True
            )
            
            embed.add_field(
                name="üèÅ Termina em",
                value=f"<t:{int(current_season.end_date.timestamp())}:F>",
                inline=False
            )
            
            # Mostrar algumas recompensas principais
            if current_season.rewards:
                rewards_text = "\n".join([
                    f"{reward.emoji} **{reward.name}** - {reward.description}"
                    for reward in current_season.rewards[:3]
                ])
                
                if len(current_season.rewards) > 3:
                    rewards_text += f"\n... e mais {len(current_season.rewards) - 3} recompensas!"
                
                embed.add_field(
                    name="üéÅ Principais Recompensas",
                    value=rewards_text,
                    inline=False
                )
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao buscar temporada atual: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="historico_temporadas", description="üìö Mostra hist√≥rico de temporadas")
@discord.app_commands.describe(
    limite="N√∫mero de temporadas para mostrar (m√°ximo 10)"
)
async def historico_temporadas(interaction: discord.Interaction, limite: int = 5):
    """Mostra hist√≥rico de temporadas"""
    await interaction.response.defer()
    
    try:
        limite = max(1, min(limite, 10))
        all_seasons = bot.season_system.get_all_seasons()
        
        if not all_seasons:
            embed = discord.Embed(
                title="üìö Hist√≥rico de Temporadas",
                description="Nenhuma temporada encontrada.",
                color=0xFFA500
            )
        else:
            # Ordenar por data de in√≠cio (mais recente primeiro)
            sorted_seasons = sorted(all_seasons, key=lambda s: s.start_date, reverse=True)
            seasons_to_show = sorted_seasons[:limite]
            
            embed = discord.Embed(
                title="üìö Hist√≥rico de Temporadas",
                description=f"Mostrando {len(seasons_to_show)} de {len(all_seasons)} temporadas",
                color=0x00BFFF
            )
            
            for season in seasons_to_show:
                theme_data = bot.season_system.config["themes"].get(
                    season.theme, 
                    bot.season_system.config["themes"]["default"]
                )
                
                status_emoji = {
                    "active": "üü¢",
                    "ended": "üî¥",
                    "upcoming": "üü°",
                    "preparing": "‚ö™"
                }.get(season.status.value, "‚ùì")
                
                season_info = (
                    f"{status_emoji} **{season.status.value.title()}**\n"
                    f"üìÖ {season.start_date.strftime('%d/%m/%Y')} - {season.end_date.strftime('%d/%m/%Y')}\n"
                    f"üé® Tema: {theme_data.get('name', season.theme.title())}\n"
                    f"üéÅ {len(season.rewards)} recompensas"
                )
                
                embed.add_field(
                    name=f"{theme_data['emoji']} {season.name}",
                    value=season_info,
                    inline=True
                )
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao buscar hist√≥rico: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="ranking_temporada", description="üèÜ Mostra ranking da temporada atual")
@discord.app_commands.describe(
    limite="N√∫mero de jogadores no ranking (m√°ximo 20)"
)
async def ranking_temporada(interaction: discord.Interaction, limite: int = 10):
    """Mostra ranking da temporada atual"""
    await interaction.response.defer()
    
    try:
        limite = max(1, min(limite, 20))
        current_season = bot.season_system.get_current_season()
        
        if not current_season:
            embed = discord.Embed(
                title="‚ùå Nenhuma Temporada Ativa",
                description="N√£o h√° temporada ativa para mostrar ranking.",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Obter rankings atuais
        rankings = await bot.dual_ranking_system.get_all_rankings()
        
        if not rankings:
            embed = discord.Embed(
                title="üìä Ranking da Temporada",
                description="Nenhum jogador ranqueado ainda.",
                color=0xFFA500
            )
        else:
            # Ordenar por pontua√ß√£o total
            sorted_players = sorted(
                rankings.items(), 
                key=lambda x: x[1].get('total_score', 0), 
                reverse=True
            )[:limite]
            
            theme_data = bot.season_system.config["themes"].get(
                current_season.theme, 
                bot.season_system.config["themes"]["default"]
            )
            
            embed = discord.Embed(
                title=f"{theme_data['emoji']} Ranking - {current_season.name}",
                description=f"Top {len(sorted_players)} jogadores da temporada atual",
                color=theme_data["color"]
            )
            
            ranking_text = ""
            for i, (user_id, data) in enumerate(sorted_players, 1):
                try:
                    user = bot.get_user(int(user_id))
                    username = user.display_name if user else f"Usu√°rio {user_id}"
                    
                    # Emojis para posi√ß√µes
                    position_emoji = {
                        1: "ü•á",
                        2: "ü•à", 
                        3: "ü•â"
                    }.get(i, f"{i}¬∫")
                    
                    total_score = data.get('total_score', 0)
                    games_played = data.get('games_played', 0)
                    
                    ranking_text += f"{position_emoji} **{username}**\n"
                    ranking_text += f"üìä {total_score:,} pontos | üéÆ {games_played} jogos\n\n"
                    
                except Exception:
                    continue
            
            if ranking_text:
                embed.description += f"\n\n{ranking_text}"
            
            embed.add_field(
                name="‚è∞ Tempo Restante",
                value=f"{current_season.get_remaining_days()} dias",
                inline=True
            )
            
            embed.add_field(
                name="üéÅ Recompensas",
                value=f"{len(current_season.rewards)} dispon√≠veis",
                inline=True
            )
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao gerar ranking: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="ranking", description="üèÜ Mostra rankings temporais espec√≠ficos")
@discord.app_commands.describe(
    periodo="Per√≠odo do ranking temporal",
    modo="Modo de jogo para o ranking",
    limite="N√∫mero de jogadores no ranking (m√°ximo 20)"
)
@discord.app_commands.choices(
    periodo=[
        discord.app_commands.Choice(name="Di√°rio", value="daily"),
        discord.app_commands.Choice(name="Semanal", value="weekly"),
        discord.app_commands.Choice(name="Mensal", value="monthly")
    ],
    modo=[
        discord.app_commands.Choice(name="Squad", value="squad"),
        discord.app_commands.Choice(name="Duo", value="duo"),
        discord.app_commands.Choice(name="Solo", value="solo")
    ]
)
async def ranking_temporal(interaction: discord.Interaction, periodo: str = "daily", modo: str = "squad", limite: int = 10):
    """Mostra rankings temporais espec√≠ficos (di√°rio, semanal, mensal)"""
    await interaction.response.defer()
    
    try:
        limite = max(1, min(limite, 20))
        
        # Usar o novo sistema de rankings temporais
        embed = await bot.dual_ranking_system.generate_temporal_leaderboard(
            mode=modo,
            period=periodo,
            limit=limite,
            min_matches=1
        )
        
        if embed:
            await interaction.followup.send(embed=embed)
        else:
            embed = discord.Embed(
                title=f"‚ùå Sem Dados - Ranking {periodo.title()}",
                description=f"Nenhum jogador possui estat√≠sticas para o per√≠odo {periodo}.",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Erro no comando ranking temporal: {e}")
        embed = discord.Embed(
            title="‚ùå Erro",
            description="Ocorreu um erro ao gerar o ranking temporal.",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="minhas_recompensas", description="üéÅ Mostra suas recompensas de temporadas")
async def minhas_recompensas(interaction: discord.Interaction):
    """Mostra recompensas de temporadas do usu√°rio"""
    await interaction.response.defer()
    
    try:
        user_id = str(interaction.user.id)
        user_data = bot.storage.get_user_data(user_id)
        
        embed = discord.Embed(
            title="üéÅ Minhas Recompensas de Temporadas",
            description=f"Recompensas conquistadas por {interaction.user.display_name}",
            color=0xFFD700
        )
        
        # T√≠tulos de temporadas
        season_titles = user_data.get("season_titles", [])
        if season_titles:
            titles_text = "\n".join([
                f"üè∑Ô∏è **{title['title']}** - <t:{int(datetime.fromisoformat(title['earned_date']).timestamp())}:d>"
                for title in season_titles[-5:]  # √öltimos 5 t√≠tulos
            ])
            
            embed.add_field(
                name="üè∑Ô∏è T√≠tulos Conquistados",
                value=titles_text,
                inline=False
            )
        
        # Moedas acumuladas
        coins = user_data.get("coins", 0)
        embed.add_field(
            name="ü™ô Moedas Totais",
            value=f"{coins:,} moedas",
            inline=True
        )
        
        # Hist√≥rico de participa√ß√£o em temporadas
        season_history = bot.season_system.get_user_season_history(user_id)
        if season_history:
            embed.add_field(
                name="üìä Temporadas Participadas",
                value=f"{len(season_history)} temporadas",
                inline=True
            )
        
        # Se n√£o tem recompensas
        if not season_titles and coins == 0 and not season_history:
            embed.description = "Voc√™ ainda n√£o conquistou recompensas de temporadas.\nParticipe das competi√ß√µes para ganhar pr√™mios!"
        
        embed.timestamp = datetime.now()
        await interaction.followup.send(embed=embed)
    
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erro",
            description=f"Erro ao buscar recompensas: {str(e)}",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

@bot.tree.command(name="filter", description="Aplicar filtros de √°udio √† m√∫sica")
async def filter_command(interaction: discord.Interaction, 
                        filter_type: Literal["none", "bass", "treble", "nightcore", "vaporwave", "8d", "karaoke"]):
    """Comando para aplicar filtros de √°udio"""
    music_system = bot.get_cog('MusicSystem')
    if not music_system:
        await interaction.response.send_message("‚ùå Sistema de m√∫sica n√£o dispon√≠vel!", ephemeral=True)
        return
    
    player = music_system.get_player(interaction.guild.id)
    if not player.voice_client or not player.current_song:
        await interaction.response.send_message("‚ùå N√£o h√° m√∫sica tocando no momento!", ephemeral=True)
        return
    
    # Aplicar filtro
    success = await music_system.apply_audio_filter(interaction.guild.id, filter_type)
    
    if success:
        filter_names = {
            "none": "Nenhum",
            "bass": "üîä Bass Boost",
            "treble": "üéµ Treble Boost",
            "nightcore": "‚ö° Nightcore",
            "vaporwave": "üåä Vaporwave",
            "8d": "üéß 8D Audio",
            "karaoke": "üé§ Karaoke"
        }
        
        embed = discord.Embed(
            title="üéõÔ∏è Filtro Aplicado",
            description=f"Filtro **{filter_names[filter_type]}** aplicado com sucesso!",
            color=0x00ff00
        )
        await interaction.response.send_message(embed=embed)
    else:
        await interaction.response.send_message("‚ùå Erro ao aplicar filtro de √°udio!", ephemeral=True)

@bot.tree.command(name="voteskip", description="Votar para pular a m√∫sica atual")
async def voteskip_command(interaction: discord.Interaction):
    """Comando para votar para pular a m√∫sica atual"""
    music_system = bot.get_cog('MusicSystem')
    if not music_system:
        await interaction.response.send_message("‚ùå Sistema de m√∫sica n√£o dispon√≠vel!", ephemeral=True)
        return
    
    player = music_system.get_player(interaction.guild.id)
    if not player.voice_client or not player.current_song:
        await interaction.response.send_message("‚ùå N√£o h√° m√∫sica tocando no momento!", ephemeral=True)
        return
    
    # Verificar se o usu√°rio est√° no canal de voz
    if not interaction.user.voice or interaction.user.voice.channel != player.voice_client.channel:
        await interaction.response.send_message("‚ùå Voc√™ precisa estar no mesmo canal de voz!", ephemeral=True)
        return
    
    # Adicionar voto
    result = music_system.add_skip_vote(interaction.guild.id, interaction.user.id)
    
    if result["already_voted"]:
        await interaction.response.send_message("‚ùå Voc√™ j√° votou para pular esta m√∫sica!", ephemeral=True)
        return
    
    # Verificar se deve pular
    if result["should_skip"]:
        embed = discord.Embed(
            title="‚è≠Ô∏è M√∫sica Pulada por Vota√ß√£o",
            description=f"**{player.current_song.title}** foi pulada por vota√ß√£o!",
            color=0xff9500
        )
        embed.add_field(
            name="üìä Votos",
            value=f"{result['votes']}/{result['required']} votos necess√°rios",
            inline=False
        )
        
        await interaction.response.send_message(embed=embed)
        
        # Pular m√∫sica
        if player.voice_client.is_playing():
            player.voice_client.stop()
    else:
        embed = discord.Embed(
            title="üó≥Ô∏è Voto Registrado",
            description=f"Seu voto para pular **{player.current_song.title}** foi registrado!",
            color=0x00ff00
        )
        embed.add_field(
            name="üìä Progresso",
            value=f"{result['votes']}/{result['required']} votos necess√°rios",
            inline=False
        )
        
        await interaction.response.send_message(embed=embed)

if __name__ == "__main__":
    # Verificar token
    token = os.getenv('DISCORD_TOKEN')
    if not token:
        logger.error("DISCORD_TOKEN n√£o encontrado no arquivo .env!")
        exit(1)
    
    try:
        # Executar bot
        bot.run(token)
    except Exception as e:
        logger.error(f"Erro fatal ao executar bot: {e}")
        exit(1)