#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DEPLOY AUTOM√ÅTICO NO RENDER
Hawk Esports Bot - Deploy Simplificado

Este script prepara todos os arquivos necess√°rios para deploy no Render
e fornece instru√ß√µes passo-a-passo para um deploy r√°pido e f√°cil.
"""

import os
import json
from datetime import datetime

class RenderDeploySimplificado:
    def __init__(self):
        self.project_name = "hawk-esports-bot"
        
    def verificar_arquivos_necessarios(self):
        """Verifica se todos os arquivos necess√°rios existem"""
        print("üîç Verificando arquivos necess√°rios...")
        
        arquivos_necessarios = {
            'requirements.txt': 'Depend√™ncias Python',
            'bot.py': 'Arquivo principal do bot',
            '.env': 'Vari√°veis de ambiente',
            'render.yaml': 'Configura√ß√£o do Render'
        }
        
        arquivos_ok = True
        for arquivo, descricao in arquivos_necessarios.items():
            if os.path.exists(arquivo):
                print(f"‚úÖ {arquivo} - {descricao}")
            else:
                print(f"‚ùå {arquivo} - {descricao} (FALTANDO)")
                arquivos_ok = False
        
        return arquivos_ok
    
    def criar_render_yaml(self):
        """Cria o arquivo render.yaml otimizado"""
        render_config = {
            'services': [{
                'type': 'web',
                'name': self.project_name,
                'env': 'python',
                'plan': 'free',
                'buildCommand': 'pip install -r requirements.txt',
                'startCommand': 'python bot.py',
                'envVars': [
                    {'key': 'PYTHON_VERSION', 'value': '3.11.0'},
                    {'key': 'DISCORD_TOKEN', 'sync': False},
                    {'key': 'DATABASE_URL', 'sync': False},
                    {'key': 'SUPABASE_URL', 'sync': False},
                    {'key': 'SUPABASE_KEY', 'sync': False}
                ]
            }]
        }
        
        with open('render.yaml', 'w') as f:
            import yaml
            yaml.dump(render_config, f, default_flow_style=False)
        
        print("‚úÖ render.yaml criado/atualizado")
    
    def criar_guia_deploy(self):
        """Cria guia completo de deploy"""
        guia = f"""
# üöÄ GUIA DE DEPLOY NO RENDER - HAWK ESPORTS BOT

## ‚úÖ Arquivos Preparados:
- ‚úÖ render.yaml (configura√ß√£o autom√°tica)
- ‚úÖ requirements.txt (depend√™ncias)
- ‚úÖ .env (vari√°veis de ambiente)
- ‚úÖ Todos os arquivos do bot

## üéØ DEPLOY EM 3 PASSOS SIMPLES:

### Passo 1: Conectar GitHub ao Render
1. Acesse: https://dashboard.render.com
2. Clique em "New +" ‚Üí "Web Service"
3. Conecte sua conta GitHub
4. Selecione o reposit√≥rio do bot
5. Clique em "Connect"

### Passo 2: Configura√ß√£o Autom√°tica
‚úÖ O Render detectar√° automaticamente o `render.yaml`
‚úÖ Todas as configura√ß√µes ser√£o aplicadas automaticamente:
   - Build Command: `pip install -r requirements.txt`
   - Start Command: `python bot.py`
   - Python Version: 3.11.0
   - Plan: Free

### Passo 3: Adicionar Vari√°veis de Ambiente
No dashboard do Render, v√° em "Environment" e adicione:

```
DISCORD_TOKEN=seu_token_do_discord_aqui
DATABASE_URL=sua_url_do_supabase_aqui
SUPABASE_URL=https://seu-projeto.supabase.co
SUPABASE_KEY=sua_chave_anonima_supabase_aqui
```

## üîß Onde encontrar as informa√ß√µes:

### Discord Token:
1. https://discord.com/developers/applications
2. Seu bot ‚Üí Bot ‚Üí Token

### Supabase (j√° configurado):
1. https://supabase.com/dashboard
2. Seu projeto ‚Üí Settings ‚Üí API
3. URL: Project URL
4. Key: anon/public key
5. DATABASE_URL: Settings ‚Üí Database ‚Üí Connection string

## üöÄ Ap√≥s o Deploy:

1. **Aguarde o build** (2-3 minutos)
2. **Verifique os logs** na aba "Logs"
3. **Teste o bot** no Discord
4. **URL do servi√ßo** ser√° gerada automaticamente

## üîÑ Atualiza√ß√µes Futuras:
- Fa√ßa push para o GitHub
- O Render far√° redeploy automaticamente
- Zero configura√ß√£o adicional necess√°ria

## üÜò Solu√ß√£o de Problemas:

### Bot n√£o conecta:
- Verifique se o DISCORD_TOKEN est√° correto
- Confirme se o bot est√° ativo no Discord Developer Portal

### Erro de banco de dados:
- Verifique se DATABASE_URL est√° correto
- Confirme se o Supabase est√° ativo
- Teste a conex√£o localmente primeiro

### Build falha:
- Verifique se requirements.txt est√° correto
- Confirme se todos os arquivos est√£o no reposit√≥rio

## üìä Monitoramento:
- **Logs em tempo real**: Dashboard ‚Üí Logs
- **M√©tricas**: Dashboard ‚Üí Metrics
- **Status**: Dashboard ‚Üí Events

---

## üéâ PRONTO!
Seu bot estar√° online 24/7 gratuitamente no Render!

**Deploy preparado em:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}
**Tempo estimado de deploy:** 5-10 minutos
**Custo:** R$ 0,00 (plano gratuito)

---

### üí° Dicas Extras:
- O plano gratuito do Render hiberna ap√≥s 15min de inatividade
- O keep_alive.py j√° est√° configurado para evitar isso
- Seu bot ficar√° online 24/7 sem custos
- Atualiza√ß√µes s√£o autom√°ticas via GitHub
"""
        
        with open('RENDER_DEPLOY_GUIA.md', 'w', encoding='utf-8') as f:
            f.write(guia)
        
        print("‚úÖ RENDER_DEPLOY_GUIA.md criado")
    
    def verificar_env_vars(self):
        """Verifica e lista as vari√°veis de ambiente necess√°rias"""
        print("\nüîç Verificando vari√°veis de ambiente...")
        
        if not os.path.exists('.env'):
            print("‚ùå Arquivo .env n√£o encontrado")
            return False
        
        with open('.env', 'r') as f:
            env_content = f.read()
        
        vars_necessarias = {
            'DISCORD_TOKEN': 'Token do bot Discord',
            'DATABASE_URL': 'URL do banco PostgreSQL (Supabase)',
            'SUPABASE_URL': 'URL do projeto Supabase',
            'SUPABASE_KEY': 'Chave an√¥nima do Supabase'
        }
        
        vars_ok = True
        for var, descricao in vars_necessarias.items():
            if var in env_content and not env_content.split(f'{var}=')[1].split('\n')[0].strip() in ['', 'SEU_TOKEN_AQUI', 'sua_url_aqui']:
                print(f"‚úÖ {var} - {descricao}")
            else:
                print(f"‚ö†Ô∏è {var} - {descricao} (PRECISA CONFIGURAR)")
                vars_ok = False
        
        return vars_ok
    
    def executar_preparacao(self):
        """Executa toda a prepara√ß√£o para deploy"""
        print("ü¶Ö HAWK ESPORTS BOT - PREPARA√á√ÉO PARA DEPLOY")
        print("=" * 55)
        
        # Verificar arquivos
        if not self.verificar_arquivos_necessarios():
            print("\n‚ùå Alguns arquivos est√£o faltando!")
            return False
        
        # Criar/atualizar render.yaml
        try:
            self.criar_render_yaml()
        except ImportError:
            print("‚ö†Ô∏è PyYAML n√£o instalado, render.yaml n√£o foi criado")
            print("   Isso n√£o √© cr√≠tico - voc√™ pode configurar manualmente")
        
        # Verificar vari√°veis de ambiente
        self.verificar_env_vars()
        
        # Criar guia de deploy
        self.criar_guia_deploy()
        
        print("\n" + "=" * 55)
        print("üéâ PREPARA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 55)
        print("\nüìñ PR√ìXIMO PASSO:")
        print("   Leia o arquivo: RENDER_DEPLOY_GUIA.md")
        print("   Siga os 3 passos simples para fazer o deploy")
        print("\n‚è±Ô∏è Tempo estimado: 5-10 minutos")
        print("üí∞ Custo: R$ 0,00 (gratuito)")
        print("\nüöÄ Seu bot ficar√° online 24/7!")
        
        return True

if __name__ == "__main__":
    deployer = RenderDeploySimplificado()
    deployer.executar_preparacao()