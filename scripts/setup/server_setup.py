#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
M√≥dulo de Configura√ß√£o Autom√°tica do Servidor
Cria automaticamente toda a estrutura do servidor Hawk Esports

Autor: Desenvolvedor S√™nior
Vers√£o: 1.0.0
"""

import discord
import logging
from typing import Dict, List, Optional

logger = logging.getLogger('HawkBot.ServerSetup')

class ServerSetup:
    """Classe respons√°vel pela configura√ß√£o autom√°tica do servidor"""
    
    def __init__(self, bot):
        self.bot = bot
        
        # Estrutura completa do servidor
        self.server_structure = {
            "categories": {
                "üìå„ÉªInforma√ß√µes": {
                    "channels": [
                        {"name": "üìú„Éªregras", "type": "text", "topic": "Regras oficiais do cl√£ Hawk Esports"},
                        {"name": "üì¢„Éªan√∫ncios", "type": "text", "topic": "An√∫ncios importantes do cl√£"},
                        {"name": "üìä„Éªresultados", "type": "text", "topic": "Resultados de partidas e torneios"},
                        {"name": "üìÜ„Éªcalend√°rio", "type": "text", "topic": "Agenda de eventos e treinos"}
                    ]
                },
                "üí¨„ÉªComunidade": {
                    "channels": [
                        {"name": "üí≠„Éªgeral", "type": "text", "topic": "Conversa geral do cl√£ Hawk Esports"},
                        {"name": "üì∑„Éªclipes", "type": "text", "topic": "Compartilhe seus melhores clipes PUBG"},
                        {"name": "üéâ„Éªeventos", "type": "text", "topic": "Organiza√ß√£o de eventos e torneios"}
                    ]
                },
                "üéÆ„ÉªGame": {
                    "channels": [
                        {"name": "üéØ„Éªscrims", "type": "text", "topic": "Organiza√ß√£o de scrimmages"},
                        {"name": "üèÜ„Éªranking", "type": "text", "topic": "Sistema completo de rankings e leaderboards"},
                        {"name": "üìä„Éªestat√≠sticas", "type": "text", "topic": "Estat√≠sticas detalhadas dos membros"}
                    ]
                },
                "üéô„ÉªVoz": {
                    "channels": [
                        {"name": "Squad 1", "type": "voice", "limit": 4},
                        {"name": "Squad 2", "type": "voice", "limit": 4},
                        {"name": "Squad 3", "type": "voice", "limit": 4},
                        {"name": "Treino", "type": "voice", "limit": 8},
                        {"name": "Estrat√©gia L√≠der", "type": "voice", "limit": 10}
                    ]
                },
                "üîí„ÉªPrivados": {
                    "channels": [
                        {"name": "L√≠der", "type": "text", "topic": "Canal exclusivo da lideran√ßa", "private": True},
                        {"name": "Co-L√≠der", "type": "text", "topic": "Canal dos co-l√≠deres", "private": True},
                        {"name": "Staff", "type": "text", "topic": "Canal da equipe administrativa", "private": True}
                    ]
                },
                "üéµ„ÉªM√∫sica": {
                    "channels": [
                        {"name": "üéµ„Éªm√∫sica", "type": "text", "topic": "Comandos de m√∫sica e controle do bot"},
                        {"name": "üéß„ÉªM√∫sica Geral", "type": "voice", "limit": 10},
                        {"name": "üé§„ÉªKaraok√™", "type": "voice", "limit": 8}
                    ]
                },
                "üìã„ÉªRegistro": {
                    "channels": [
                        {"name": "üìã„Éªregistro", "type": "text", "topic": "Canal para novos membros registrarem seu nick PUBG"}
                    ]
                }
            },
            "roles": {
                "ranked": [
                    {"name": "Predador", "color": 0xFF0000, "hoist": True},
                    {"name": "Diamante", "color": 0x00FFFF, "hoist": True},
                    {"name": "Ouro", "color": 0xFFD700, "hoist": True},
                    {"name": "Prata", "color": 0xC0C0C0, "hoist": True},
                    {"name": "Bronze", "color": 0xCD7F32, "hoist": True}
                ],
                "mm": [
                    {"name": "Mestre MM", "color": 0x8A2BE2, "hoist": True},
                    {"name": "Diamante MM", "color": 0x4169E1, "hoist": True},
                    {"name": "Ouro MM", "color": 0xFFA500, "hoist": True},
                    {"name": "Prata MM", "color": 0x808080, "hoist": True},
                    {"name": "Bronze MM", "color": 0xA0522D, "hoist": True}
                ],
                "hierarchy": [
                    {"name": "L√≠der", "color": 0xFF1493, "hoist": True, "permissions": "admin"},
                    {"name": "Co-L√≠der", "color": 0xFF69B4, "hoist": True, "permissions": "mod"},
                    {"name": "Membro", "color": 0x32CD32, "hoist": True},
                    {"name": "Recruta", "color": 0x90EE90, "hoist": True},
                    {"name": "Inativo", "color": 0x696969, "hoist": False}
                ],
                "special": [
                    {"name": "Acesso liberado", "color": 0x00FF00, "hoist": False},
                    {"name": "N√£o Registrado", "color": 0xFF6B6B, "hoist": False}
                ]
            }
        }
    
    async def setup_complete_server(self, guild: discord.Guild) -> bool:
        """Configura completamente o servidor com todas as categorias, canais e roles"""
        try:
            logger.info(f"Iniciando configura√ß√£o completa do servidor {guild.name}")
            
            # Criar roles primeiro
            roles_created = await self._create_all_roles(guild)
            logger.info(f"Criadas {roles_created} roles")
            
            # Criar categorias e canais
            categories_created = await self._create_all_categories_and_channels(guild)
            logger.info(f"Criadas {categories_created} categorias")
            
            # Configurar permiss√µes especiais
            await self._setup_special_permissions(guild)
            
            # Enviar mensagem de boas-vindas no canal de registro
            await self._send_welcome_message(guild)
            
            # Popular canais com conte√∫do detalhado
            await self._populate_channel_content(guild)
            
            logger.info("Configura√ß√£o do servidor conclu√≠da com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f"Erro na configura√ß√£o do servidor: {e}")
            return False
    
    async def _create_all_roles(self, guild: discord.Guild) -> int:
        """Cria todas as roles necess√°rias"""
        roles_created = 0
        existing_roles = [role.name.lower() for role in guild.roles]
        
        # Criar roles por categoria
        for category, roles_list in self.server_structure["roles"].items():
            for role_data in roles_list:
                role_name = role_data["name"]
                
                # Verificar se role j√° existe
                if role_name.lower() in existing_roles:
                    logger.info(f"Role '{role_name}' j√° existe, pulando...")
                    continue
                
                try:
                    # Configurar permiss√µes especiais
                    if role_data.get("permissions") == "admin":
                        permissions = discord.Permissions.all()
                    elif role_data.get("permissions") == "mod":
                        permissions = discord.Permissions(
                            manage_messages=True,
                            manage_channels=True,
                            kick_members=True,
                            ban_members=True,
                            manage_roles=True
                        )
                    else:
                        permissions = discord.Permissions()
                    
                    # Criar role
                    await guild.create_role(
                        name=role_name,
                        color=discord.Color(role_data["color"]),
                        hoist=role_data.get("hoist", False),
                        permissions=permissions,
                        reason="Configura√ß√£o autom√°tica Hawk Esports"
                    )
                    
                    roles_created += 1
                    logger.info(f"Role '{role_name}' criada com sucesso")
                    
                except Exception as e:
                    logger.error(f"Erro ao criar role '{role_name}': {e}")
        
        return roles_created
    
    async def _create_all_categories_and_channels(self, guild: discord.Guild) -> int:
        """Cria todas as categorias e canais"""
        categories_created = 0
        existing_categories = [cat.name.lower() for cat in guild.categories]
        
        for category_name, category_data in self.server_structure["categories"].items():
            # Verificar se categoria j√° existe
            if category_name.lower() in existing_categories:
                logger.info(f"Categoria '{category_name}' j√° existe, pulando...")
                continue
            
            try:
                # Criar categoria
                category = await guild.create_category(
                    name=category_name,
                    reason="Configura√ß√£o autom√°tica Hawk Esports"
                )
                categories_created += 1
                logger.info(f"Categoria '{category_name}' criada")
                
                # Criar canais da categoria
                await self._create_channels_in_category(guild, category, category_data["channels"])
                
            except Exception as e:
                logger.error(f"Erro ao criar categoria '{category_name}': {e}")
        
        return categories_created
    
    async def _create_channels_in_category(self, guild: discord.Guild, category: discord.CategoryChannel, channels_data: List[Dict]):
        """Cria canais dentro de uma categoria"""
        existing_channels = [ch.name.lower() for ch in guild.channels]
        
        for channel_data in channels_data:
            channel_name = channel_data["name"]
            
            # Verificar se canal j√° existe
            if channel_name.lower() in existing_channels:
                logger.info(f"Canal '{channel_name}' j√° existe, pulando...")
                continue
            
            try:
                if channel_data["type"] == "text":
                    # Criar canal de texto
                    channel = await guild.create_text_channel(
                        name=channel_name,
                        category=category,
                        topic=channel_data.get("topic", ""),
                        reason="Configura√ß√£o autom√°tica Hawk Esports"
                    )
                    
                elif channel_data["type"] == "voice":
                    # Criar canal de voz
                    channel = await guild.create_voice_channel(
                        name=channel_name,
                        category=category,
                        user_limit=channel_data.get("limit", 0),
                        reason="Configura√ß√£o autom√°tica Hawk Esports"
                    )
                
                # Configurar permiss√µes especiais para canais privados
                if channel_data.get("private", False):
                    await self._setup_private_channel_permissions(guild, channel, channel_name)
                
                logger.info(f"Canal '{channel_name}' criado com sucesso")
                
            except Exception as e:
                logger.error(f"Erro ao criar canal '{channel_name}': {e}")
    
    async def _setup_private_channel_permissions(self, guild: discord.Guild, channel, channel_name: str):
        """Configura permiss√µes para canais privados"""
        try:
            # Negar acesso para @everyone
            await channel.set_permissions(
                guild.default_role,
                read_messages=False,
                send_messages=False
            )
            
            # Permitir acesso baseado no nome do canal
            role_name = channel_name.split()[0]  # "L√≠der", "Co-L√≠der", "Staff"
            
            # Buscar role correspondente
            target_role = discord.utils.get(guild.roles, name=role_name)
            if target_role:
                await channel.set_permissions(
                    target_role,
                    read_messages=True,
                    send_messages=True,
                    manage_messages=True
                )
                logger.info(f"Permiss√µes configuradas para canal privado '{channel_name}'")
            
        except Exception as e:
            logger.error(f"Erro ao configurar permiss√µes do canal '{channel_name}': {e}")
    
    async def _setup_special_permissions(self, guild: discord.Guild):
        """Configura permiss√µes especiais do servidor com sistema de acesso limitado"""
        try:
            # Buscar roles necess√°rias
            acesso_role = discord.utils.get(guild.roles, name="Acesso liberado")
            nao_registrado_role = discord.utils.get(guild.roles, name="N√£o Registrado")
            
            if not acesso_role or not nao_registrado_role:
                logger.warning("Roles 'Acesso liberado' ou 'N√£o Registrado' n√£o encontradas")
                return
            
            # === CANAIS P√öBLICOS (vis√≠veis para todos) ===
            public_channels = [
                "üìú„Éªregras", "üì¢„Éªan√∫ncios", "üìã„Éªregistro"
            ]
            
            for channel_name in public_channels:
                channel = discord.utils.get(guild.channels, name=channel_name)
                if channel and isinstance(channel, discord.TextChannel):
                    # @everyone pode ver mas n√£o enviar mensagens
                    await channel.set_permissions(
                        guild.default_role,
                        read_messages=True,
                        send_messages=False,
                        add_reactions=True
                    )
                    
                    # N√£o registrados podem ver mas n√£o enviar mensagens
                    await channel.set_permissions(
                        nao_registrado_role,
                        read_messages=True,
                        send_messages=False,
                        add_reactions=True
                    )
                    
                    # Registrados podem ver mas n√£o enviar mensagens (exceto registro)
                    if channel_name == "üìã„Éªregistro":
                        await channel.set_permissions(
                            acesso_role,
                            read_messages=True,
                            send_messages=True,
                            add_reactions=True
                        )
                    else:
                        await channel.set_permissions(
                            acesso_role,
                            read_messages=True,
                            send_messages=False,
                            add_reactions=True
                        )
            
            # === CANAIS RESTRITOS (apenas para registrados) ===
            restricted_channels = [
                "üí≠„Éªgeral", "üì∑„Éªclipes", "üéâ„Éªeventos",
                "üéØ„Éªscrims", "üìä„Éªestat√≠sticas", "üèÜ„Éªranking",
                "üìä„Éªresultados", "üìÜ„Éªcalend√°rio", "üéµ„Éªm√∫sica"
            ]
            
            for channel_name in restricted_channels:
                channel = discord.utils.get(guild.channels, name=channel_name)
                if channel and isinstance(channel, discord.TextChannel):
                    # @everyone n√£o pode ver
                    await channel.set_permissions(
                        guild.default_role,
                        read_messages=False,
                        send_messages=False
                    )
                    
                    # N√£o registrados n√£o podem ver
                    await channel.set_permissions(
                        nao_registrado_role,
                        read_messages=False,
                        send_messages=False
                    )
                    
                    # Registrados podem ver e interagir
                    if channel_name in ["üèÜ„Éªranking", "üìä„Éªresultados", "üìÜ„Éªcalend√°rio"]:
                        # Canais somente leitura para registrados
                        await channel.set_permissions(
                            acesso_role,
                            read_messages=True,
                            send_messages=False,
                            add_reactions=True
                        )
                    else:
                        # Canais interativos para registrados
                        await channel.set_permissions(
                            acesso_role,
                            read_messages=True,
                            send_messages=True,
                            add_reactions=True
                        )
            
            # === CANAIS DE VOZ RESTRITOS ===
            voice_channels = [
                "Squad 1", "Squad 2", "Squad 3", "Treino", "Estrat√©gia L√≠der",
                "üéß„ÉªM√∫sica Geral", "üé§„ÉªKaraok√™"
            ]
            
            for channel_name in voice_channels:
                channel = discord.utils.get(guild.channels, name=channel_name)
                if channel and isinstance(channel, discord.VoiceChannel):
                    # @everyone n√£o pode ver
                    await channel.set_permissions(
                        guild.default_role,
                        view_channel=False,
                        connect=False
                    )
                    
                    # N√£o registrados n√£o podem ver
                    await channel.set_permissions(
                        nao_registrado_role,
                        view_channel=False,
                        connect=False
                    )
                    
                    # Registrados podem ver e conectar
                    await channel.set_permissions(
                        acesso_role,
                        view_channel=True,
                        connect=True,
                        speak=True
                    )
            
            # Configurar permiss√µes do bot em todos os canais
            for channel in guild.channels:
                if isinstance(channel, (discord.TextChannel, discord.VoiceChannel)):
                    await channel.set_permissions(
                        guild.me,
                        read_messages=True,
                        send_messages=True,
                        manage_messages=True,
                        embed_links=True,
                        attach_files=True,
                        view_channel=True,
                        connect=True,
                        speak=True
                    )
            
            logger.info("Sistema de permiss√µes com acesso limitado configurado com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao configurar permiss√µes especiais: {e}")
    
    async def _send_welcome_message(self, guild: discord.Guild):
        """Envia mensagem de boas-vindas no canal de registro"""
        try:
            registro_channel = discord.utils.get(guild.channels, name="üìã„Éªregistro")
            if not registro_channel:
                return
            
            embed = discord.Embed(
                title="ü¶Ö Bem-vindo ao Hawk Esports!",
                description="**O cl√£ mais dominante do PUBG!**\n\n" +
                           "Para ter acesso completo ao servidor, voc√™ precisa se registrar:",
                color=discord.Color.gold()
            )
            
            embed.add_field(
                name="üìã Como se registrar:",
                value="Use o comando: `/register_pubg nome:<seu_nick> shard:<plataforma>`\n\n" +
                      "**Exemplo:** `/register_pubg nome:HawkPlayer shard:steam`",
                inline=False
            )
            
            embed.add_field(
                name="üåê Plataformas dispon√≠veis:",
                value="‚Ä¢ `steam` - PC (Steam)\n" +
                      "‚Ä¢ `psn` - PlayStation\n" +
                      "‚Ä¢ `xbox` - Xbox\n" +
                      "‚Ä¢ `kakao` - Kakao",
                inline=False
            )
            
            embed.add_field(
                name="üèÜ Ap√≥s o registro:",
                value="‚Ä¢ Acesso liberado a todos os canais\n" +
                      "‚Ä¢ Cargo autom√°tico baseado em suas stats\n" +
                      "‚Ä¢ Participa√ß√£o nos rankings do cl√£\n" +
                      "‚Ä¢ Integra√ß√£o com seus clipes Medal",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Rumo √† vit√≥ria! ü¶Ö")
            
            await registro_channel.send(embed=embed)
            
            # Enviar conte√∫do detalhado para outros canais
            await self._populate_channel_content(guild)
            
            logger.info("Mensagem de boas-vindas e conte√∫do dos canais enviados")
            
        except Exception as e:
            logger.error(f"Erro ao enviar mensagem de boas-vindas: {e}")
    
    async def _populate_channel_content(self, guild: discord.Guild):
        """Popula todos os canais com conte√∫do detalhado"""
        try:
            # Enviar conte√∫do para cada canal
            await self._send_rules_content(guild)
            await self._send_announcements_content(guild)
            await self._send_results_content(guild)
            await self._send_calendar_content(guild)
            await self._send_general_content(guild)
            await self._send_clips_content(guild)
            await self._send_events_content(guild)
            await self._send_scrims_content(guild)
            await self._send_ranking_content(guild)
            await self._send_stats_content(guild)
            await self._send_music_content(guild)
            
            logger.info("Conte√∫do dos canais populado com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao popular conte√∫do dos canais: {e}")
    
    async def _send_music_content(self, guild: discord.Guild):
        """Envia conte√∫do para o canal de m√∫sica"""
        try:
            music_channel = discord.utils.get(guild.text_channels, name="üéµ„Éªm√∫sica")
            if not music_channel:
                return
            
            # Embed principal do sistema de m√∫sica
            embed = discord.Embed(
                title="üéµ Sistema de M√∫sica Hawk Esports",
                description="**Bem-vindo ao sistema de m√∫sica mais avan√ßado do Discord!**\n\n" +
                           "Use os comandos abaixo para controlar a m√∫sica nos canais de voz.",
                color=0x9B59B6
            )
            
            # Comandos b√°sicos
            embed.add_field(
                name="üé∂ Comandos B√°sicos",
                value="`/play <m√∫sica>` - Tocar m√∫sica\n" +
                      "`/pause` - Pausar m√∫sica\n" +
                      "`/resume` - Retomar m√∫sica\n" +
                      "`/stop` - Parar m√∫sica\n" +
                      "`/skip` - Pular m√∫sica\n" +
                      "`/queue` - Ver fila de m√∫sicas",
                inline=True
            )
            
            # Comandos avan√ßados
            embed.add_field(
                name="üéß Comandos Avan√ßados",
                value="`/nowplaying` - M√∫sica atual\n" +
                      "`/seek <tempo>` - Pular para tempo\n" +
                      "`/lyrics` - Letras da m√∫sica\n" +
                      "`/history` - Hist√≥rico\n" +
                      "`/favorites` - Favoritas\n" +
                      "`/voteskip` - Vota√ß√£o para pular",
                inline=True
            )
            
            # Playlists
            embed.add_field(
                name="üìã Playlists",
                value="`/playlist create <nome>` - Criar playlist\n" +
                      "`/playlist add <m√∫sica>` - Adicionar\n" +
                      "`/playlist show` - Ver playlists\n" +
                      "`/playlist play <nome>` - Tocar playlist\n" +
                      "`/playlist delete <nome>` - Deletar",
                inline=True
            )
            
            # Filtros de √°udio
            embed.add_field(
                name="üéõÔ∏è Filtros de √Åudio",
                value="`/filter bassboost` - Graves\n" +
                      "`/filter nightcore` - Nightcore\n" +
                      "`/filter vaporwave` - Vaporwave\n" +
                      "`/filter 8d` - √Åudio 8D\n" +
                      "`/filter karaoke` - Karaok√™\n" +
                      "`/filter clear` - Limpar filtros",
                inline=True
            )
            
            # Controles de volume
            embed.add_field(
                name="üîä Volume e Controles",
                value="`/volume <0-100>` - Ajustar volume\n" +
                      "`/loop` - Repetir m√∫sica\n" +
                      "`/shuffle` - Embaralhar fila\n" +
                      "`/clear` - Limpar fila\n" +
                      "`/disconnect` - Desconectar bot",
                inline=True
            )
            
            # Informa√ß√µes importantes
            embed.add_field(
                name="‚ÑπÔ∏è Informa√ß√µes Importantes",
                value="‚Ä¢ Entre em um canal de voz antes de usar comandos\n" +
                      "‚Ä¢ Suporte para YouTube, Spotify, SoundCloud\n" +
                      "‚Ä¢ Qualidade de √°udio premium\n" +
                      "‚Ä¢ Sistema de vota√ß√£o democr√°tico\n" +
                      "‚Ä¢ Playlists p√∫blicas e privadas",
                inline=False
            )
            
            embed.set_footer(
                text="üéµ Hawk Esports Music System | Use os canais de voz dedicados para melhor experi√™ncia",
                icon_url=guild.icon.url if guild.icon else None
            )
            
            await music_channel.send(embed=embed)
            
            # Embed de canais recomendados
            channels_embed = discord.Embed(
                title="üéß Canais de M√∫sica Recomendados",
                description="Use estes canais para a melhor experi√™ncia musical:",
                color=0x8E44AD
            )
            
            channels_embed.add_field(
                name="üéß M√∫sica Geral",
                value="Canal principal para ouvir m√∫sica em grupo\n" +
                      "**Limite:** 10 pessoas\n" +
                      "**Ideal para:** Sess√µes de m√∫sica casual",
                inline=True
            )
            
            channels_embed.add_field(
                name="üé§ Karaok√™",
                value="Canal dedicado para karaok√™ e canto\n" +
                      "**Limite:** 8 pessoas\n" +
                      "**Ideal para:** Karaok√™ e performances",
                inline=True
            )
            
            await music_channel.send(embed=channels_embed)
            
            logger.info("Conte√∫do do canal de m√∫sica enviado")
            
        except Exception as e:
            logger.error(f"Erro ao enviar conte√∫do do canal de m√∫sica: {e}")
    
    async def _send_rules_content(self, guild: discord.Guild):
        """Envia regras detalhadas para o canal de regras"""
        try:
            rules_channel = discord.utils.get(guild.channels, name="üìú„Éªregras")
            if not rules_channel:
                return
            
            embed = discord.Embed(
                title="üìú REGRAS OFICIAIS - HAWK ESPORTS",
                description="**Leia atentamente e siga todas as regras para manter um ambiente saud√°vel!**",
                color=0xFF6B35
            )
            
            embed.add_field(
                name="üéØ 1. RESPEITO E CONDUTA",
                value="‚Ä¢ Trate todos com respeito e cordialidade\n" +
                      "‚Ä¢ Proibido discrimina√ß√£o, ass√©dio ou bullying\n" +
                      "‚Ä¢ Mantenha conversas construtivas\n" +
                      "‚Ä¢ Sem discuss√µes pol√≠ticas ou religiosas",
                inline=False
            )
            
            embed.add_field(
                name="üéÆ 2. GAMEPLAY E COMPETI√á√ÉO",
                value="‚Ä¢ Proibido cheats, hacks ou exploits\n" +
                      "‚Ä¢ Jogue sempre com fair play\n" +
                      "‚Ä¢ Participe ativamente dos treinos\n" +
                      "‚Ä¢ Comunique aus√™ncias com anteced√™ncia",
                inline=False
            )
            
            embed.add_field(
                name="üí¨ 3. COMUNICA√á√ÉO",
                value="‚Ä¢ Use os canais apropriados para cada assunto\n" +
                      "‚Ä¢ Evite spam e flood de mensagens\n" +
                      "‚Ä¢ Proibido conte√∫do NSFW\n" +
                      "‚Ä¢ Mantenha conversas em portugu√™s",
                inline=False
            )
            
            embed.add_field(
                name="üèÜ 4. HIERARQUIA E ORGANIZA√á√ÉO",
                value="‚Ä¢ Respeite a hierarquia do cl√£\n" +
                      "‚Ä¢ Siga orienta√ß√µes da lideran√ßa\n" +
                      "‚Ä¢ Participe das atividades do cl√£\n" +
                      "‚Ä¢ Mantenha seu registro PUBG atualizado",
                inline=False
            )
            
            embed.add_field(
                name="‚ö†Ô∏è 5. PUNI√á√ïES",
                value="‚Ä¢ **1¬™ Advert√™ncia:** Aviso verbal\n" +
                      "‚Ä¢ **2¬™ Advert√™ncia:** Timeout 24h\n" +
                      "‚Ä¢ **3¬™ Advert√™ncia:** Kick tempor√°rio\n" +
                      "‚Ä¢ **Infra√ß√µes graves:** Ban permanente",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Disciplina e Excel√™ncia | √öltima atualiza√ß√£o: Janeiro 2025")
            
            await rules_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar regras: {e}")
    
    async def _send_announcements_content(self, guild: discord.Guild):
        """Envia template de an√∫ncios"""
        try:
            announcements_channel = discord.utils.get(guild.channels, name="üì¢„Éªan√∫ncios")
            if not announcements_channel:
                return
            
            embed = discord.Embed(
                title="üì¢ CANAL DE AN√öNCIOS OFICIAIS",
                description="**Este canal √© destinado apenas para an√∫ncios importantes da lideran√ßa!**",
                color=0x00FF00
            )
            
            embed.add_field(
                name="üéØ O que voc√™ encontrar√° aqui:",
                value="‚Ä¢ Atualiza√ß√µes importantes do cl√£\n" +
                      "‚Ä¢ Mudan√ßas nas regras ou estrutura\n" +
                      "‚Ä¢ An√∫ncios de torneios e eventos\n" +
                      "‚Ä¢ Novidades sobre o PUBG\n" +
                      "‚Ä¢ Comunicados da lideran√ßa",
                inline=False
            )
            
            embed.add_field(
                name="üîî Mantenha as notifica√ß√µes ativadas!",
                value="Clique no sino üîî para receber notifica√ß√µes de todos os an√∫ncios importantes.",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Fique sempre informado!")
            
            await announcements_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de an√∫ncios: {e}")
    
    async def _send_results_content(self, guild: discord.Guild):
        """Envia template para canal de resultados"""
        try:
            results_channel = discord.utils.get(guild.channels, name="üìä„Éªresultados")
            if not results_channel:
                return
            
            embed = discord.Embed(
                title="üìä RESULTADOS DE PARTIDAS E TORNEIOS",
                description="**Acompanhe o desempenho do cl√£ Hawk Esports!**",
                color=0xFFD700
            )
            
            embed.add_field(
                name="üèÜ √öltimos Resultados:",
                value="*Os resultados das partidas aparecer√£o aqui automaticamente*\n\n" +
                      "‚Ä¢ Scrimmages do cl√£\n" +
                      "‚Ä¢ Torneios oficiais\n" +
                      "‚Ä¢ Custom games\n" +
                      "‚Ä¢ Estat√≠sticas semanais",
                inline=False
            )
            
            embed.add_field(
                name="üìà Estat√≠sticas Autom√°ticas:",
                value="‚Ä¢ K/D m√©dio do cl√£\n" +
                      "‚Ä¢ Taxa de vit√≥rias\n" +
                      "‚Ä¢ Posicionamento em rankings\n" +
                      "‚Ä¢ Performance individual dos membros",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Resultados atualizados automaticamente")
            
            await results_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de resultados: {e}")
    
    async def _send_calendar_content(self, guild: discord.Guild):
        """Envia template para canal de calend√°rio"""
        try:
            calendar_channel = discord.utils.get(guild.channels, name="üìÜ„Éªcalend√°rio")
            if not calendar_channel:
                return
            
            embed = discord.Embed(
                title="üìÜ CALEND√ÅRIO DE EVENTOS",
                description="**Agenda oficial do cl√£ Hawk Esports**",
                color=0x9932CC
            )
            
            embed.add_field(
                name="üìÖ Eventos Regulares:",
                value="‚Ä¢ **Segunda-feira:** Treino de Squad (20h)\n" +
                      "‚Ä¢ **Quarta-feira:** Scrimmage (21h)\n" +
                      "‚Ä¢ **Sexta-feira:** Custom Games (20h)\n" +
                      "‚Ä¢ **Domingo:** Reuni√£o de Cl√£ (19h)",
                inline=False
            )
            
            embed.add_field(
                name="üèÜ Pr√≥ximos Torneios:",
                value="*Torneios ser√£o anunciados aqui com anteced√™ncia*\n\n" +
                      "‚Ä¢ Inscri√ß√µes abertas\n" +
                      "‚Ä¢ Datas e hor√°rios\n" +
                      "‚Ä¢ Requisitos de participa√ß√£o",
                inline=False
            )
            
            embed.add_field(
                name="‚è∞ Lembretes:",
                value="‚Ä¢ Confirme presen√ßa nos eventos\n" +
                      "‚Ä¢ Chegue 15 minutos antes\n" +
                      "‚Ä¢ Mantenha Discord e PUBG atualizados",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Nunca perca um evento!")
            
            await calendar_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de calend√°rio: {e}")
    
    async def _send_general_content(self, guild: discord.Guild):
        """Envia mensagem de boas-vindas para canal geral"""
        try:
            general_channel = discord.utils.get(guild.channels, name="üí≠„Éªgeral")
            if not general_channel:
                return
            
            embed = discord.Embed(
                title="üí≠ CHAT GERAL - HAWK ESPORTS",
                description="**Bem-vindos ao cora√ß√£o do cl√£!**",
                color=0x00BFFF
            )
            
            embed.add_field(
                name="üéØ Este √© o lugar para:",
                value="‚Ä¢ Conversas gerais sobre PUBG\n" +
                      "‚Ä¢ Compartilhar experi√™ncias\n" +
                      "‚Ä¢ Fazer amizades no cl√£\n" +
                      "‚Ä¢ Discutir estrat√©gias\n" +
                      "‚Ä¢ Organizar partidas casuais",
                inline=False
            )
            
            embed.add_field(
                name="ü§ù Dicas para uma boa conviv√™ncia:",
                value="‚Ä¢ Seja respeitoso com todos\n" +
                      "‚Ä¢ Ajude novos membros\n" +
                      "‚Ä¢ Compartilhe conhecimento\n" +
                      "‚Ä¢ Mantenha o clima positivo",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Unidos somos mais fortes! ü¶Ö")
            
            await general_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar conte√∫do do canal geral: {e}")
    
    async def _send_clips_content(self, guild: discord.Guild):
        """Envia template para canal de clipes"""
        try:
            clips_channel = discord.utils.get(guild.channels, name="üì∑„Éªclipes")
            if not clips_channel:
                return
            
            embed = discord.Embed(
                title="üì∑ CLIPES E HIGHLIGHTS",
                description="**Compartilhe seus melhores momentos no PUBG!**",
                color=0xFF1493
            )
            
            embed.add_field(
                name="üé¨ O que postar aqui:",
                value="‚Ä¢ Clutches √©picos\n" +
                      "‚Ä¢ Kills impressionantes\n" +
                      "‚Ä¢ Momentos engra√ßados\n" +
                      "‚Ä¢ Chicken Dinners\n" +
                      "‚Ä¢ Jogadas estrat√©gicas",
                inline=False
            )
            
            embed.add_field(
                name="üì± Como compartilhar:",
                value="‚Ä¢ Use Medal.tv para gravar\n" +
                      "‚Ä¢ Compartilhe links do YouTube\n" +
                      "‚Ä¢ Envie arquivos de v√≠deo\n" +
                      "‚Ä¢ Adicione uma descri√ß√£o da jogada",
                inline=False
            )
            
            embed.add_field(
                name="üèÜ Clipe da Semana:",
                value="‚Ä¢ O melhor clipe ganha destaque\n" +
                      "‚Ä¢ Vota√ß√£o da comunidade\n" +
                      "‚Ä¢ Pr√™mios especiais para o vencedor",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Mostre suas habilidades!")
            
            await clips_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de clipes: {e}")
    
    async def _send_events_content(self, guild: discord.Guild):
        """Envia template para canal de eventos"""
        try:
            events_channel = discord.utils.get(guild.channels, name="üéâ„Éªeventos")
            if not events_channel:
                return
            
            embed = discord.Embed(
                title="üéâ EVENTOS ESPECIAIS",
                description="**Participe dos eventos exclusivos do Hawk Esports!**",
                color=0xFF6347
            )
            
            embed.add_field(
                name="üèÜ Tipos de Eventos:",
                value="‚Ä¢ **Torneios Internos:** Competi√ß√µes entre membros\n" +
                      "‚Ä¢ **Custom Games:** Partidas personalizadas\n" +
                      "‚Ä¢ **Desafios Semanais:** Miss√µes especiais\n" +
                      "‚Ä¢ **Eventos Tem√°ticos:** Comemora√ß√µes especiais\n" +
                      "‚Ä¢ **Scrimmages:** Treinos competitivos",
                inline=False
            )
            
            embed.add_field(
                name="üéÅ Recompensas:",
                value="‚Ä¢ Badges exclusivos\n" +
                      "‚Ä¢ Cargos especiais tempor√°rios\n" +
                      "‚Ä¢ XP bonus\n" +
                      "‚Ä¢ Reconhecimento no hall da fama",
                inline=False
            )
            
            embed.add_field(
                name="üìã Como Participar:",
                value="‚Ä¢ Fique atento aos an√∫ncios\n" +
                      "‚Ä¢ Confirme presen√ßa com rea√ß√£o\n" +
                      "‚Ä¢ Esteja online no hor√°rio\n" +
                      "‚Ä¢ Siga as regras do evento",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Eventos √©picos te esperam!")
            
            await events_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de eventos: {e}")
    
    async def _send_scrims_content(self, guild: discord.Guild):
        """Envia template para canal de scrims"""
        try:
            scrims_channel = discord.utils.get(guild.channels, name="‚öîÔ∏è„Éªscrims")
            if not scrims_channel:
                return
            
            embed = discord.Embed(
                title="‚öîÔ∏è SCRIMMAGES COMPETITIVOS",
                description="**Treinos s√©rios para elevar o n√≠vel do cl√£!**",
                color=0x8B0000
            )
            
            embed.add_field(
                name="üéØ Objetivo dos Scrims:",
                value="‚Ä¢ Aprimorar estrat√©gias de equipe\n" +
                      "‚Ä¢ Testar novas t√°ticas\n" +
                      "‚Ä¢ Prepara√ß√£o para torneios\n" +
                      "‚Ä¢ Desenvolver comunica√ß√£o\n" +
                      "‚Ä¢ An√°lise de gameplay",
                inline=False
            )
            
            embed.add_field(
                name="üìÖ Hor√°rios Regulares:",
                value="‚Ä¢ **Quarta-feira:** 21h - Scrim Principal\n" +
                      "‚Ä¢ **S√°bado:** 20h - Scrim de Fim de Semana\n" +
                      "‚Ä¢ **Domingo:** 19h - Review e An√°lise\n" +
                      "*Hor√°rios podem variar conforme disponibilidade*",
                inline=False
            )
            
            embed.add_field(
                name="‚ö° Requisitos:",
                value="‚Ä¢ Patente m√≠nima: Ouro\n" +
                      "‚Ä¢ Microfone obrigat√≥rio\n" +
                      "‚Ä¢ Pontualidade essencial\n" +
                      "‚Ä¢ Atitude competitiva e respeitosa",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Treine como um profissional!")
            
            await scrims_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de scrims: {e}")
    
    async def _send_ranking_content(self, guild: discord.Guild):
        """Envia template para canal de ranking"""
        try:
            ranking_channel = discord.utils.get(guild.channels, name="üèÜ„Éªranking")
            if not ranking_channel:
                return
            
            # Embed principal do sistema de ranking
            embed = discord.Embed(
                title="üèÜ SISTEMA DE RANKING HAWK ESPORTS",
                description="**Sistema completo de classifica√ß√£o com rankings duplos e temporadas!**\n\n" +
                           "Acompanhe sua evolu√ß√£o e compete pelos primeiros lugares!",
                color=0xFFD700
            )
            
            # Comandos de ranking
            embed.add_field(
                name="üìä Comandos de Ranking",
                value="`/rank` - Ver seu ranking atual\n" +
                      "`/leaderboard` - Top 10 geral\n" +
                      "`/season_stats` - Estat√≠sticas da temporada\n" +
                      "`/compare @usu√°rio` - Comparar stats\n" +
                      "`/rank_history` - Hist√≥rico de ranks",
                inline=True
            )
            
            # Tipos de ranking
            embed.add_field(
                name="üéØ Tipos de Ranking",
                value="**üèÖ Ranking Cl√°ssico:**\n" +
                      "Bronze IV ‚Üí Survivor\n\n" +
                      "**‚öîÔ∏è Ranking Metro Royale:**\n" +
                      "Bronze MM ‚Üí Mestre MM\n\n" +
                      "**üèÜ Ranking Geral:**\n" +
                      "Baseado em XP total",
                inline=True
            )
            
            # Sistema de pontua√ß√£o
            embed.add_field(
                name="‚≠ê Sistema de Pontua√ß√£o",
                value="**Ganhe XP por:**\n" +
                      "‚Ä¢ Vit√≥rias: +50 XP\n" +
                      "‚Ä¢ Top 10: +25 XP\n" +
                      "‚Ä¢ Kills: +5 XP cada\n" +
                      "‚Ä¢ Participa√ß√£o: +10 XP\n" +
                      "‚Ä¢ Eventos: +100 XP\n" +
                      "‚Ä¢ Atividade Discord: +5 XP/dia",
                inline=False
            )
            
            # Recompensas por temporada
            embed.add_field(
                name="üéÅ Recompensas por Temporada",
                value="**ü•á 1¬∫ Lugar:**\n" +
                      "‚Ä¢ Badge Lend√°rio üèÜ\n" +
                      "‚Ä¢ Cargo \"Campe√£o da Temporada\"\n" +
                      "‚Ä¢ Destaque permanente\n\n" +
                      "**ü•à Top 3:**\n" +
                      "‚Ä¢ Badge √âpico ü•à\n" +
                      "‚Ä¢ Cargo \"Elite\"\n\n" +
                      "**ü•â Top 10:**\n" +
                      "‚Ä¢ Badge Raro ü•â\n" +
                      "‚Ä¢ Reconhecimento especial",
                inline=True
            )
            
            # Patentes e progress√£o
            embed.add_field(
                name="üéñÔ∏è Sistema de Patentes",
                value="**Cl√°ssico:** ü•â Bronze ‚Üí üíé Diamond ‚Üí üëë Survivor\n" +
                      "**Metro Royale:** ü•â Bronze MM ‚Üí üèÜ Mestre MM\n\n" +
                      "**Progress√£o Autom√°tica:**\n" +
                      "‚Ä¢ Cargos atualizados em tempo real\n" +
                      "‚Ä¢ Cores exclusivas por patente\n" +
                      "‚Ä¢ Emblemas personalizados",
                inline=True
            )
            
            # Temporadas
            embed.add_field(
                name="üìÖ Sistema de Temporadas",
                value="**Dura√ß√£o:** 30 dias\n" +
                      "**Reset:** Autom√°tico\n" +
                      "**Hist√≥rico:** Mantido permanentemente\n" +
                      "**Recompensas:** Distribu√≠das automaticamente\n" +
                      "**Pr√≥xima temporada:** Veja com `/season_info`",
                inline=False
            )
            
            embed.set_footer(
                text="üèÜ Hawk Esports Ranking System | Rankings atualizados em tempo real",
                icon_url=guild.icon.url if guild.icon else None
            )
            
            await ranking_channel.send(embed=embed)
            
            # Embed de leaderboard exemplo
            leaderboard_embed = discord.Embed(
                title="üìä LEADERBOARD ATUAL",
                description="*Use `/leaderboard` para ver o ranking atualizado em tempo real*",
                color=0xF39C12
            )
            
            leaderboard_embed.add_field(
                name="üèÜ Top Geral (Exemplo)",
                value="ü•á **Player1** - 2,450 XP - üëë Survivor\n" +
                      "ü•à **Player2** - 2,200 XP - üíé Diamond I\n" +
                      "ü•â **Player3** - 1,980 XP - üíé Diamond II\n" +
                      "4Ô∏è‚É£ **Player4** - 1,750 XP - üèÜ Master III\n" +
                      "5Ô∏è‚É£ **Player5** - 1,650 XP - üèÜ Master IV",
                inline=True
            )
            
            leaderboard_embed.add_field(
                name="‚öîÔ∏è Top Metro Royale (Exemplo)",
                value="ü•á **PlayerA** - 1,800 XP - üèÜ Mestre MM\n" +
                      "ü•à **PlayerB** - 1,600 XP - üíé Diamante MM\n" +
                      "ü•â **PlayerC** - 1,400 XP - ü•á Ouro MM\n" +
                      "4Ô∏è‚É£ **PlayerD** - 1,200 XP - ü•à Prata MM\n" +
                      "5Ô∏è‚É£ **PlayerE** - 1,000 XP - ü•â Bronze MM",
                inline=True
            )
            
            leaderboard_embed.add_field(
                name="üìà Estat√≠sticas da Temporada",
                value="**Temporada Atual:** #12\n" +
                      "**Dias Restantes:** 15 dias\n" +
                      "**Jogadores Ativos:** 45\n" +
                      "**Partidas Registradas:** 1,234\n" +
                      "**XP Total Distribu√≠do:** 125,670",
                inline=False
            )
            
            await ranking_channel.send(embed=leaderboard_embed)
            
            logger.info("Conte√∫do do canal de ranking enviado")
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de ranking: {e}")
    
    async def _send_stats_content(self, guild: discord.Guild):
        """Envia template para canal de estat√≠sticas"""
        try:
            stats_channel = discord.utils.get(guild.channels, name="üìà„Éªestat√≠sticas")
            if not stats_channel:
                return
            
            embed = discord.Embed(
                title="üìà ESTAT√çSTICAS DETALHADAS",
                description="**An√°lise completa do desempenho do cl√£!**",
                color=0x32CD32
            )
            
            embed.add_field(
                name="üìä Estat√≠sticas Individuais:",
                value="‚Ä¢ K/D Ratio pessoal\n" +
                      "‚Ä¢ Taxa de vit√≥rias\n" +
                      "‚Ä¢ Damage m√©dio por partida\n" +
                      "‚Ä¢ Tempo de sobreviv√™ncia\n" +
                      "‚Ä¢ Headshot percentage",
                inline=False
            )
            
            embed.add_field(
                name="üèÜ Estat√≠sticas do Cl√£:",
                value="‚Ä¢ Performance geral do grupo\n" +
                      "‚Ä¢ Compara√ß√£o com outros cl√£s\n" +
                      "‚Ä¢ Evolu√ß√£o mensal\n" +
                      "‚Ä¢ Melhores duplas/squads\n" +
                      "‚Ä¢ Recordes estabelecidos",
                inline=False
            )
            
            embed.add_field(
                name="üìÖ Relat√≥rios Autom√°ticos:",
                value="‚Ä¢ **Di√°rio:** Resumo das partidas\n" +
                      "‚Ä¢ **Semanal:** An√°lise detalhada\n" +
                      "‚Ä¢ **Mensal:** Relat√≥rio completo\n" +
                      "‚Ä¢ **Temporada:** Balan√ßo geral",
                inline=False
            )
            
            embed.set_footer(text="Hawk Esports - Dados que fazem a diferen√ßa!")
            
            await stats_channel.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erro ao enviar template de estat√≠sticas: {e}")
    
    async def get_server_info(self, guild: discord.Guild) -> discord.Embed:
        """Retorna informa√ß√µes sobre a estrutura atual do servidor"""
        embed = discord.Embed(
            title=f"üìä Estrutura do Servidor - {guild.name}",
            description="Informa√ß√µes sobre categorias, canais e roles",
            color=discord.Color.blue()
        )
        
        # Contar elementos
        categories_count = len(guild.categories)
        text_channels_count = len([ch for ch in guild.channels if isinstance(ch, discord.TextChannel)])
        voice_channels_count = len([ch for ch in guild.channels if isinstance(ch, discord.VoiceChannel)])
        roles_count = len(guild.roles) - 1  # Excluir @everyone
        
        embed.add_field(
            name="üìÅ Categorias",
            value=f"{categories_count} categorias",
            inline=True
        )
        
        embed.add_field(
            name="üí¨ Canais de Texto",
            value=f"{text_channels_count} canais",
            inline=True
        )
        
        embed.add_field(
            name="üéôÔ∏è Canais de Voz",
            value=f"{voice_channels_count} canais",
            inline=True
        )
        
        embed.add_field(
            name="üè∑Ô∏è Roles",
            value=f"{roles_count} roles",
            inline=True
        )
        
        embed.add_field(
            name="üë• Membros",
            value=f"{guild.member_count} membros",
            inline=True
        )
        
        embed.set_footer(text="Hawk Esports - Estrutura profissional!")
        
        return embed